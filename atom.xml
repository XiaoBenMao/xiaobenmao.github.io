<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My World]]></title>
  <link href="http://xiaobenmao.github.io/atom.xml" rel="self"/>
  <link href="http://xiaobenmao.github.io/"/>
  <updated>2015-09-10T19:47:29+08:00</updated>
  <id>http://xiaobenmao.github.io/</id>
  <author>
    <name><![CDATA[嗷大喵]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Swift-体验tableView]]></title>
    <link href="http://xiaobenmao.github.io/blog/2015/09/03/swift-ti-yan-tableview/"/>
    <updated>2015-09-03T21:25:01+08:00</updated>
    <id>http://xiaobenmao.github.io/blog/2015/09/03/swift-ti-yan-tableview</id>
    <content type="html"><![CDATA[<ul>
<li>遵守协议的写法: 直接在类名后通过逗号分隔</li>
<li>可以为协议单独写个<code>extension</code>,在类扩展中实现代理方法,是代码结构更加清晰</li>
</ul>


<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="k">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Swift中遵守协议直接在后面通过逗号分隔即可</span>
</span><span class='line'><span class="k">class</span> <span class="nl">ViewController</span><span class="p">:</span> <span class="bp">UIViewController</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">loadView</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">tv</span> <span class="o">=</span> <span class="bp">UITableView</span><span class="p">()</span>
</span><span class='line'>        <span class="n">tv</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="bp">UIScreen</span><span class="p">.</span><span class="n">mainScreen</span><span class="p">().</span><span class="n">bounds</span>
</span><span class='line'>        <span class="n">tv</span><span class="p">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="nb">self</span>
</span><span class='line'>        <span class="n">tv</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">view</span> <span class="o">=</span> <span class="n">tv</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// MARK: - 懒加载数据</span>
</span><span class='line'>    <span class="n">lazy</span> <span class="k">var</span> <span class="nl">dataList</span><span class="p">:[</span><span class="n">String</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="s">&quot;lnj&quot;</span><span class="p">,</span> <span class="s">&quot;lmj&quot;</span><span class="p">,</span> <span class="s">&quot;zs&quot;</span><span class="p">,</span> <span class="s">&quot;ls&quot;</span><span class="p">,</span> <span class="s">&quot;ww&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 苹果官方建议, 可以将数据源代理方法单独写到一个扩展中, 以便于提高代码的可读性</span>
</span><span class='line'><span class="c1">// extension 相当于OC中的 catogory</span>
</span><span class='line'><span class="k">extension</span> <span class="nl">ViewController</span><span class="p">:</span> <span class="bp">UITableViewDataSource</span><span class="p">,</span> <span class="bp">UITableViewDelegate</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// MARK: - UITableViewDataSource</span>
</span><span class='line'>    <span class="c1">// 一共有多少行</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">tableView</span><span class="p">(</span><span class="nl">tableView</span><span class="p">:</span> <span class="bp">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nl">section</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">dataList</span><span class="p">.</span><span class="n">count</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// 每行显示什么内容</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">tableView</span><span class="p">(</span><span class="nl">tableView</span><span class="p">:</span> <span class="bp">UITableView</span><span class="p">,</span> <span class="n">cellForRowAtIndexPath</span> <span class="nl">indexPath</span><span class="p">:</span> <span class="bp">NSIndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">UITableViewCell</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 1.取出cell</span>
</span><span class='line'>        <span class="k">var</span> <span class="n">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="p">.</span><span class="n">dequeueReusableCellWithIdentifier</span><span class="p">(</span><span class="s">&quot;customCell&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">cell</span> <span class="o">==</span> <span class="nb">nil</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">cell</span> <span class="o">=</span> <span class="bp">UITableViewCell</span><span class="p">(</span><span class="nl">style</span><span class="p">:</span> <span class="n">UITableViewCellStyle</span><span class="p">.</span><span class="n">Default</span><span class="p">,</span> <span class="nl">reuseIdentifier</span><span class="p">:</span> <span class="s">&quot;customCell&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// 2.设置数据</span>
</span><span class='line'>        <span class="n">cell</span><span class="o">?</span><span class="p">.</span><span class="n">textLabel</span><span class="o">?</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">dataList</span><span class="p">[</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 3.返回cell</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">cell</span><span class="o">!</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift-setter&amp;getter]]></title>
    <link href="http://xiaobenmao.github.io/blog/2015/09/02/swift-setter-and-getter/"/>
    <updated>2015-09-02T21:01:41+08:00</updated>
    <id>http://xiaobenmao.github.io/blog/2015/09/02/swift-setter-and-getter</id>
    <content type="html"><![CDATA[<ul>
<li><p>Swift中建议使用<code>didSet</code>来给属性设置值</p>

<ul>
<li>调用时机: 调用完set方法后,调用didSet方法</li>
</ul>
</li>
<li><p>Swift中的<code>命名空间</code></p>

<ul>
<li>在Swift中, 如果想使用某一个类, 是不用import头文件的</li>
<li>因为Swift中新增了一个OC中以前没有的概念 &ldquo;命名空间&rdquo;</li>
<li>只要是在同一个命名空间中的资源都是共享的</li>
<li>默认情况下, 项目名称就是命名空间</li>
<li>正是因为这样, 所以在做Swift开发时有多了很多坑

<ul>
<li>如果是Swift项目要使用第三方框架, 那么建议使用cocoapods来集成框架</li>
<li>因为如果是通过cocoapods集成的框架, 在另外一个项目中, 那么命名空间就不一样</li>
<li>这样可以有效的避免 三方框架中的类名 和 我们自己的 冲突</li>
</ul>
</li>
</ul>
</li>
</ul>


<!--more-->


<ul>
<li>自定义Person类</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">Person</span><span class="p">:</span> <span class="bp">NSObject</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 在开发中, 不建议这样写</span>
</span><span class='line'>    <span class="c1">// 定义属性</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">_name</span><span class="p">:</span><span class="n">String</span><span class="o">?</span>
</span><span class='line'>    <span class="c1">// getter和setter方法</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">name</span><span class="p">:</span><span class="n">String</span><span class="o">?</span><span class="p">{</span>
</span><span class='line'>        <span class="kr">get</span><span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">_name</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="kr">set</span><span class="p">{</span>
</span><span class='line'>            <span class="c1">// newValue为系统生成</span>
</span><span class='line'>            <span class="c1">// 只要外界给通过对象.name给name赋值, 那么值就会保存在newValue</span>
</span><span class='line'>            <span class="n">_name</span> <span class="o">=</span> <span class="n">newValue</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="nl">gender</span><span class="p">:</span><span class="n">String</span><span class="o">?</span><span class="p">{</span>
</span><span class='line'>        <span class="c1">// 设置完值之后调用</span>
</span><span class='line'>        <span class="c1">// Swift中使用didSet来替代OC中重写setter方法</span>
</span><span class='line'>        <span class="kr">didSet</span><span class="p">{</span>
</span><span class='line'>            <span class="n">print</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>            <span class="n">print</span><span class="p">(</span><span class="n">gender</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 如果只重写了get方法, 那么这个属性我们称之为 计算型 属性</span>
</span><span class='line'>    <span class="c1">// 也就是对应OC中的只读属性</span>
</span><span class='line'>    <span class="c1">// 注意点: 计算型属性是不占用内存空间的</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">age</span><span class="p">:</span><span class="n">Int</span><span class="p">{</span>
</span><span class='line'>        <span class="kr">get</span><span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">30</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>使用</li>
</ul>


<pre><code class="`Swift">
 import UIKit

class ViewController: UIViewController {

    override func viewDidLoad() {
        super.viewDidLoad()
        let p = Person()
        p.name = "lnj"
        print(p.name)

        p.gender = "man"

            // p.age = 99
        print(p.age)

        print(self)

    }

}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift-构造方法]]></title>
    <link href="http://xiaobenmao.github.io/blog/2015/09/02/swift-gou-zao-fang-fa/"/>
    <updated>2015-09-02T20:14:16+08:00</updated>
    <id>http://xiaobenmao.github.io/blog/2015/09/02/swift-gou-zao-fang-fa</id>
    <content type="html"><![CDATA[<ul>
<li><p>Swift中定义属性</p>

<ul>
<li>如果定义属性的时候没有初始化, 那么必须在后面写上一个?</li>
<li>Swift要求, 属性是必须有初始值的</li>
<li>只要在构造方法中对属性进行了初始化, 那么就不用写?</li>
</ul>
</li>
<li><p>Swift中对定义基本属性和对象属性<code>内存处理</code>不同</p>

<ul>
<li>如果是定义一个 &ldquo;对象属性&rdquo; 那么后面可以写上 ?

<ul>
<li>因为super.init()方法在分配存储空间的时候, 如果发现属性是一个对象, 并且是一个可选类型, 那么会给这个属性分配存储空间</li>
</ul>
</li>
<li>如果是定义一个 &ldquo;基本数据类型属性&rdquo;, 那么建议直接赋值为0

<ul>
<li>但是如果属性是一个基本数据类型, 并且是可选类型, 那么super.init()不会给该属性分配存储空间</li>
</ul>
</li>
</ul>
</li>
</ul>


<p> <!--more--></p>

<ul>
<li>定义Person类</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="k">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">Person</span><span class="p">:</span> <span class="bp">NSObject</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 定义name属性</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">name</span><span class="p">:</span><span class="n">String</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// var age:Int?</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">age</span><span class="p">:</span><span class="n">Int</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 注意: 如果自定义了构造方法, 并且没有重写父类默认的构造方法</span>
</span><span class='line'>    <span class="c1">// 那么默认的构造方法就会失效</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">override</span> <span class="k">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;lnj&quot;</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">30</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 自定义构造方法</span>
</span><span class='line'>    <span class="c1">// Swift中有方法重载的概念</span>
</span><span class='line'>    <span class="c1">// 允许有同名的方法, 只要形参或返回值不一样即可</span>
</span><span class='line'>    <span class="k">init</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span><span class="n">String</span><span class="p">,</span> <span class="nl">age</span><span class="p">:</span><span class="n">Int</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">init</span><span class="p">(</span><span class="nl">dict</span><span class="p">:[</span><span class="nl">String</span><span class="p">:</span> <span class="bp">NSObject</span><span class="p">])</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">.</span><span class="k">init</span><span class="p">()</span>
</span><span class='line'>        <span class="c1">// 注意点: Swift中如果想在构造方法中使用KVC给属性赋值</span>
</span><span class='line'>        <span class="c1">// 那么在使用KVC之前必须调用super.init()</span>
</span><span class='line'>        <span class="c1">// 调用super.init()的目的就是为了能在在KVC赋值之前给属性分配存储空间</span>
</span><span class='line'>        <span class="n">setValuesForKeysWithDictionary</span><span class="p">(</span><span class="n">dict</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>使用</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="k">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">ViewController</span><span class="p">:</span> <span class="bp">UIViewController</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>        <span class="c1">// Do any additional setup after loading the view, typically from a nib.</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="k">let</span> <span class="n">p</span> <span class="o">=</span> <span class="n">Person</span><span class="p">()</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="s">&quot;\(p.name), \(p.age) &quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">let</span> <span class="n">p2</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="s">&quot;zs&quot;</span><span class="p">,</span> <span class="nl">age</span><span class="p">:</span> <span class="mi">88</span><span class="p">)</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="s">&quot;\(p2.name), \(p2.age) &quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//let p3 = Person(dict: [&quot;name&quot;:&quot;lnj&quot;, &quot;age&quot;: 998])</span>
</span><span class='line'>        <span class="c1">//print(&quot;\(p3.name), \(p3.age)&quot;)</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift-懒加载]]></title>
    <link href="http://xiaobenmao.github.io/blog/2015/09/02/swift-lan-jia-zai/"/>
    <updated>2015-09-02T19:10:57+08:00</updated>
    <id>http://xiaobenmao.github.io/blog/2015/09/02/swift-lan-jia-zai</id>
    <content type="html"><![CDATA[<ul>
<li>懒加载的修饰词<code>lazy</code></li>
<li>懒加载等号右边的闭包后面要加'()&lsquo;,表示调用</li>
<li>懒加载等号右边的闭包写法有多种</li>
</ul>


<!--more-->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import UIKit
</span><span class='line'>
</span><span class='line'>class ViewController: UIViewController {
</span><span class='line'>
</span><span class='line'>    // 格式: 定义变量时前面使用lazy来修饰变量, 后面通过等到赋值一个闭包
</span><span class='line'>    // 注意点: 1.必须是用var 2.闭包后面必须跟上()
</span><span class='line'>    
</span><span class='line'>    lazy var dataList:[String] = {
</span><span class='line'>        ()-&gt;[String]
</span><span class='line'>        in
</span><span class='line'>        print("我被搞了")
</span><span class='line'>        return ["zs", "ls", "wl"]
</span><span class='line'>    }()
</span><span class='line'>    
</span><span class='line'>    // 如果闭包是用于懒加载, 那么in之前的代码都可以删除包括in在内
</span><span class='line'>    lazy var dataList2:[String] = {
</span><span class='line'>       
</span><span class='line'>        print("我被搞了")
</span><span class='line'>        return ["zs", "ls", "wl"]
</span><span class='line'>    }()
</span><span class='line'>    
</span><span class='line'>    // 懒加载
</span><span class='line'>    let demoFunc = {
</span><span class='line'>        ()-&gt;[String]
</span><span class='line'>        in
</span><span class='line'>        print("我被搞了")
</span><span class='line'>        return ["123", "456", "789"]
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    lazy var dataList3:[String] = self.demoFunc()
</span><span class='line'>    
</span><span class='line'>    // 如果懒加载内的操作只有一句,则可以直接写在等号后面
</span><span class='line'>    
</span><span class='line'>    lazy var dataList2:[String] =  [String]()
</span><span class='line'>    
</span><span class='line'>    
</span><span class='line'>    override func touchesBegan(touches: Set&lt;UITouch&gt;, withEvent event: UIEvent?) {
</span><span class='line'>
</span><span class='line'>        print(dataList3)
</span><span class='line'>        print(dataList3)
</span><span class='line'>        print(dataList3)
</span><span class='line'>        
</span><span class='line'>        print(demoFunc())
</span><span class='line'>        
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift-闭包的循环引用]]></title>
    <link href="http://xiaobenmao.github.io/blog/2015/09/01/swift-bi-bao-de-xun-huan-yin-yong/"/>
    <updated>2015-09-01T19:05:00+08:00</updated>
    <id>http://xiaobenmao.github.io/blog/2015/09/01/swift-bi-bao-de-xun-huan-yin-yong</id>
    <content type="html"><![CDATA[<ul>
<li>在Swift的闭包中,会对对象进行引用,类比OC中的Block,如果实例对象内对闭包进行了强引用,就会造成循环引用,造成内存泄露.</li>
</ul>


<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="k">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">ViewController</span><span class="p">:</span> <span class="bp">UIViewController</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 在Swift中, 如果在某个类中定义一个属性, 那么这个属性必须要初始化, 否则就会报错</span>
</span><span class='line'>    <span class="c1">// 如果占时不想初始化, 那么可以在后面写上一个?号</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 注意: 这个是错误的写法, 当前写法代表闭包的返回值可以是nil</span>
</span><span class='line'>    <span class="c1">// var finished: ()-&gt;()?</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">finished</span><span class="p">:</span> <span class="p">(()</span><span class="o">-&gt;</span><span class="p">())</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>        <span class="c1">// Do any additional setup after loading the view, typically from a nib.</span>
</span><span class='line'>        <span class="c1">// OC中的解决方案</span>
</span><span class='line'>        <span class="c1">// __weak typeof(self) weakSelf = self</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">weak</span> <span class="k">var</span> <span class="n">weakSelf</span> <span class="o">=</span> <span class="nb">self</span>
</span><span class='line'>        <span class="n">loadData</span> <span class="p">{</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="k">in</span>
</span><span class='line'>            <span class="n">print</span><span class="p">(</span><span class="s">&quot;回到主线程更新UI&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="c1">// 在Swift开发中, 能不写self就不写self, 但是在闭包中必须写上self</span>
</span><span class='line'>            <span class="c1">// 所以以后看到self基本上都和闭包有关系</span>
</span><span class='line'>            <span class="n">weakSelf</span><span class="o">!</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="bp">UIColor</span><span class="p">.</span><span class="n">redColor</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">loadData</span><span class="p">(</span><span class="nl">finished</span><span class="p">:</span> <span class="p">()</span><span class="o">-&gt;</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="s">&quot;执行耗时操作&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">finished</span> <span class="o">=</span> <span class="n">finished</span>
</span><span class='line'>        <span class="n">finished</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 析构函数,相当于OC中的dealloc</span>
</span><span class='line'>    <span class="k">deinit</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="s">&quot;滚&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift-闭包]]></title>
    <link href="http://xiaobenmao.github.io/blog/2015/09/01/swift-bi-bao/"/>
    <updated>2015-09-01T09:50:57+08:00</updated>
    <id>http://xiaobenmao.github.io/blog/2015/09/01/swift-bi-bao</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'>
</span><span class='line'>闭包(Closures):
</span><span class='line'>闭包:是自包含的代码块,可以在代码中被传递和使用
</span><span class='line'>闭包可以捕获和存储其所在上下文中任意常量和变量的引用,这就是所谓的闭包并包裹着这些常量和变量,俗称闭包.
</span><span class='line'>闭包的几种形式:
</span><span class='line'>1,“全局函数是一个有名字但不会捕获任何值的闭包
</span><span class='line'>2,嵌套函数是一个有名字并可以捕获其封闭函数域内值的闭包
</span><span class='line'>3,闭包表达式是一个利用轻量级语法所写的可以捕获其上下文中变量或常量值的匿名闭包”
</span><span class='line'>闭包的常见优化场景:
</span><span class='line'>1,“利用上下文推断参数和返回值类型
</span><span class='line'>2,隐式返回单表达式闭包，即单表达式闭包可以省略return关键字
</span><span class='line'>3,参数名称缩写
</span><span class='line'>4,尾随（Trailing）闭包语法”
</span><span class='line'>*/</span></code></pre></td></tr></table></div></figure>




<!--more-->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//: Playground - noun: a place where people can play
</span><span class='line'>
</span><span class='line'>import UIKit
</span><span class='line'>
</span><span class='line'>var str = "Hello, playground"
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'>sorted函数
</span><span class='line'>1,接收两个参数:
</span><span class='line'>1&gt;已知类型的数组
</span><span class='line'>2&gt;闭包函数,
</span><span class='line'>
</span><span class='line'>*/
</span><span class='line'>// sorted函数
</span><span class='line'>var strs = ["dd", "cc", "aa", "bb"]
</span><span class='line'>
</span><span class='line'>func backwards(str1:String, str2:String)-&gt;Bool
</span><span class='line'>{
</span><span class='line'>    return str1 &gt; str2
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>var sortFun = sorted(strs, backwards)
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'> 闭包表达式语法
</span><span class='line'>// 格式
</span><span class='line'>{ (parameters) -&gt; returnType in
</span><span class='line'>    statements
</span><span class='line'>}
</span><span class='line'>1, 函数和返回值都在大括号之内
</span><span class='line'>2, in:该关键字表示闭包的参数和返回值类型定义已经完成,闭包函数体即将开始
</span><span class='line'>*/
</span><span class='line'>// 使用
</span><span class='line'> sortFun = sorted(strs, { (str1:String, str2:String) -&gt; Bool in
</span><span class='line'>    str1 &gt; str2
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'>根据上下文推断类型:
</span><span class='line'>    通过内联闭包表达式构造的闭包作为参数传递给函数时,都可以推断出闭包的参数和返回值类型,所以几乎不需要利用完整格式构造任何内联闭包
</span><span class='line'>
</span><span class='line'>*/
</span><span class='line'>sortFun = sorted(strs, {str1, str2 in return str1 &gt; str2})
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'>单表达式闭包隐式返回:
</span><span class='line'>    通过隐藏return 关键字来隐式返回单行表达式的结果
</span><span class='line'>*/
</span><span class='line'>
</span><span class='line'>sortFun = sorted(strs, {s1, s2 in s1 &gt; s2})
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'>参数名称缩写:
</span><span class='line'>    1,内联函数的参数名称可以缩写,使用比如:$0,$1顺序调用闭包参数
</span><span class='line'>    2,如果使用了参数名称缩写,可以省略参数的定义,因为名称缩写的类型会根据函数类型进行推断
</span><span class='line'>    3,in关键字也可以省略,闭包表达式完全由闭包函数体构成
</span><span class='line'>*/
</span><span class='line'>
</span><span class='line'>sortFun = sorted(strs, {$0 &gt; $1})
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'>运算符函数:
</span><span class='line'>    1,Swift的String类型定义了关于大于号(&gt;)的字符串实现
</span><span class='line'>    2,"&gt;"作为一个函数接收两个String类型的参数,并返回Bool类型
</span><span class='line'>*/
</span><span class='line'>// 此处刚好满足"&gt;"运算符的条件
</span><span class='line'>sortFun = sorted(strs, &gt;);
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'>尾随闭包
</span><span class='line'>    使用情况:如果需要将一个很长的闭包表达式作为最后一个参数传递给函数,可以使用尾随闭包来增强函数的可读性
</span><span class='line'>*/
</span><span class='line'>
</span><span class='line'>// 不使用尾随闭包
</span><span class='line'>func aFunc(closur:()-&gt;())
</span><span class='line'>{
</span><span class='line'>    // 函数体部分
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>// 只有一个闭包参数的尾随闭包
</span><span class='line'>aFunc({
</span><span class='line'>    // 闭包主体部分
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>// 有多个参数,且最后一个参数为闭包的的尾随闭包
</span><span class='line'>aFunc(){
</span><span class='line'>    // 闭包主体部分
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>// 如果函数只有闭包表达式一个参数,使用尾随闭包可以省略"()"
</span><span class='line'>aFunc{
</span><span class='line'>
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>// 字符串数组的sorted排序可以简写
</span><span class='line'>sortFun = sorted(strs){
</span><span class='line'>    $0 &gt; $1
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'>Swift的Array类型有一个map方法:
</span><span class='line'>    0,获取一个闭包表达式作为其唯一参数,并返回该元素所映射的值(可以是不同类型的值)
</span><span class='line'>    1,数组中的每一个值都会调用这个闭包
</span><span class='line'>    2,具体的映射方法和返回值类型由闭包来指定
</span><span class='line'>    3,当提供给数组闭包函数后,map方法将返回一个新的数组,数组中包含了与原数组--对应映射后的值
</span><span class='line'>*/
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'>使用map的尾随闭包方法将Int型数组[123, 58, 79]转换为包含对应String类型的数组["OneTwoThree","ThreeFourTwo,"OneTwo""]
</span><span class='line'>*/
</span><span class='line'>
</span><span class='line'>let digitNames = [
</span><span class='line'>    0 : "Zero", 1 : "Two", 3 : "Three",4 : "Four",5 : "Five",
</span><span class='line'>    6 : "Six", 7 : "Seven", 8 : "Eight",9 : "Nine"
</span><span class='line'>]
</span><span class='line'>
</span><span class='line'>let numbers = [123, 58, 79]
</span><span class='line'>
</span><span class='line'>let numbersToStrings = numbers.map{
</span><span class='line'>    (var number)-&gt; String in
</span><span class='line'>
</span><span class='line'>    var outPut = ""
</span><span class='line'>
</span><span class='line'>    while(number &gt; 0)
</span><span class='line'>    {
</span><span class='line'>        // 个位
</span><span class='line'>        var num1 = number % 10
</span><span class='line'>        outPut += digitNames[num1]!
</span><span class='line'>        number /= 10
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    return outPut
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>numbersToStrings
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'>闭包表达式(Closure Expressions)
</span><span class='line'>*/
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift-字符串]]></title>
    <link href="http://xiaobenmao.github.io/blog/2015/09/01/swift-zi-fu-chuan/"/>
    <updated>2015-09-01T09:40:24+08:00</updated>
    <id>http://xiaobenmao.github.io/blog/2015/09/01/swift-zi-fu-chuan</id>
    <content type="html"><![CDATA[<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="c1">//: Playground - noun: a place where people can play</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="c1">// 在OC中定义字符串用 @&quot;&quot;. Swift中用&quot;&quot;</span>
</span><span class='line'><span class="c1">// 注意点: OC中的字符串是NSString, Swift中的字符串是String</span>
</span><span class='line'><span class="c1">//        OC中的字符串是一个对象, 继承于NSObjcte</span>
</span><span class='line'><span class="c1">//        Swift中的字符串是一个结构体</span>
</span><span class='line'><span class="c1">//        Swift中的字符串的性能比OC中的高</span>
</span><span class='line'><span class="k">var</span> <span class="nl">str</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;wq &quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 拼接</span>
</span><span class='line'><span class="k">var</span> <span class="n">str2</span> <span class="o">=</span> <span class="s">&quot;cool&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">str</span> <span class="o">+=</span> <span class="n">str2</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 格式化</span>
</span><span class='line'><span class="k">let</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">30</span>
</span><span class='line'><span class="k">let</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;wq&quot;</span>
</span><span class='line'><span class="c1">// 目标:  name = lnj , age = 30</span>
</span><span class='line'><span class="c1">// 在Swift中可以使用 \()来拼接其它值</span>
</span><span class='line'><span class="k">var</span> <span class="n">str3</span> <span class="o">=</span> <span class="s">&quot;name = \(name), age = \(num)&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 09: 08: 13</span>
</span><span class='line'><span class="c1">// 注意: 所有的值都必须放到数组中, 哪怕只有一个值也需要放到数组中</span>
</span><span class='line'><span class="k">var</span> <span class="n">str4</span> <span class="o">=</span> <span class="n">String</span><span class="p">(</span><span class="nl">format</span><span class="p">:</span> <span class="s">&quot;%02d: %02d: %02d&quot;</span><span class="p">,</span> <span class="nl">arguments</span><span class="p">:</span> <span class="p">[</span><span class="mi">9</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// 截取</span>
</span><span class='line'><span class="c1">// 注意: 在Swift中, 如果需要截取字符串, 建议使用OC的字符串来截取, 因为Swift中String的字符串截取方法使用起来非常复杂和蛋疼</span>
</span><span class='line'><span class="c1">// Swift中的字符串可以和OC中的字符串非常非常方便的进行转换</span>
</span><span class='line'><span class="k">var</span> <span class="nl">str5</span><span class="p">:</span> <span class="bp">NSString</span> <span class="o">=</span> <span class="s">&quot;wq nb&quot;</span>
</span><span class='line'><span class="k">var</span> <span class="n">str6</span> <span class="o">=</span> <span class="s">&quot;wq fc nb&quot;</span> <span class="kt">as</span> <span class="bp">NSString</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="n">subStr</span> <span class="o">=</span> <span class="n">str5</span><span class="p">.</span><span class="n">substringWithRange</span><span class="p">(</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// Swift中的字符串是支持直接遍历的</span>
</span><span class='line'><span class="k">var</span> <span class="n">str7</span> <span class="o">=</span> <span class="s">&quot;www.baidu.com&quot;</span>
</span><span class='line'><span class="k">for</span> <span class="n">c</span> <span class="k">in</span> <span class="n">str7</span><span class="p">.</span><span class="n">characters</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift-字典]]></title>
    <link href="http://xiaobenmao.github.io/blog/2015/09/01/swift-zi-dian/"/>
    <updated>2015-09-01T09:30:16+08:00</updated>
    <id>http://xiaobenmao.github.io/blog/2015/09/01/swift-zi-dian</id>
    <content type="html"><![CDATA[<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">//: Playground - noun: a place where people can play</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 创建字典</span>
</span><span class='line'><span class="c1">// @{@&quot;key&quot;: &quot;value&quot;};</span>
</span><span class='line'><span class="c1">// Swift中创建字典和创建数组一样, 用[]</span>
</span><span class='line'><span class="c1">// [String : NSObject] 类型是以后做iOS开发中最常见的一种格式</span>
</span><span class='line'><span class="k">let</span> <span class="n">dict</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;name&quot;</span><span class="o">:</span> <span class="s">&quot;ls&quot;</span><span class="p">,</span> <span class="s">&quot;age&quot;</span><span class="o">:</span> <span class="mi">30</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// 获取value</span>
</span><span class='line'><span class="n">dict</span><span class="p">[</span><span class="s">&quot;name&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 遍历字典</span>
</span><span class='line'><span class="k">for</span> <span class="n">key</span> <span class="k">in</span> <span class="n">dict</span><span class="p">.</span><span class="n">keys</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">dict</span><span class="p">[</span><span class="n">key</span><span class="p">])</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 利用元祖类型遍历字典, 会自动将字典中的key赋值给元祖中的第一个变量, 将value赋值给元祖中的第二个变量</span>
</span><span class='line'><span class="c1">// 注意: 第一个是key, 第二个value</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">kk</span><span class="p">,</span> <span class="n">vv</span><span class="p">)</span> <span class="k">in</span> <span class="n">dict</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">kk</span><span class="p">)</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">vv</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 新增key / value</span>
</span><span class='line'><span class="c1">// 如果对应的key在字典中没有, 那么就会新增</span>
</span><span class='line'><span class="k">var</span> <span class="n">dict2</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;name&quot;</span><span class="o">:</span> <span class="s">&quot;ls&quot;</span><span class="p">,</span> <span class="s">&quot;age&quot;</span><span class="o">:</span> <span class="mi">30</span><span class="p">]</span>
</span><span class='line'><span class="n">dict2</span><span class="p">[</span><span class="s">&quot;gender&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;man&quot;</span>
</span><span class='line'><span class="n">dict2</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// 更新key / value</span>
</span><span class='line'><span class="c1">// 如果对应的key在字典中有, 那么就会更新</span>
</span><span class='line'><span class="n">dict2</span><span class="p">[</span><span class="s">&quot;name&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;zs&quot;</span>
</span><span class='line'><span class="n">dict2</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 删除</span>
</span><span class='line'><span class="n">dict2</span><span class="p">.</span><span class="n">removeValueForKey</span><span class="p">(</span><span class="s">&quot;name&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">dict2</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 更新字典</span>
</span><span class='line'><span class="n">dict2</span><span class="p">.</span><span class="n">updateValue</span><span class="p">(</span><span class="s">&quot;20&quot;</span><span class="p">,</span> <span class="nl">forKey</span><span class="p">:</span> <span class="s">&quot;age&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">dict2</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 合并字典</span>
</span><span class='line'><span class="k">var</span> <span class="n">dict3</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;score&quot;</span><span class="o">:</span> <span class="mi">99</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="k">in</span> <span class="n">dict3</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">dict2</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">dict2</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift-函数]]></title>
    <link href="http://xiaobenmao.github.io/blog/2015/09/01/swift-han-shu/"/>
    <updated>2015-09-01T09:20:31+08:00</updated>
    <id>http://xiaobenmao.github.io/blog/2015/09/01/swift-han-shu</id>
    <content type="html"><![CDATA[<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="c1">//: Playground - noun: a place where people can play</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">Swift定义函数的格式:</span>
</span><span class='line'>
</span><span class='line'><span class="cm">语义: 将前面计算的结果返回给  -&gt; 返回值</span>
</span><span class='line'><span class="cm">func 函数名称(参数列表) -&gt; 返回值</span>
</span><span class='line'><span class="cm">{</span>
</span><span class='line'><span class="cm">    执行代码</span>
</span><span class='line'><span class="cm">}</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 没有返回值没有参数</span>
</span><span class='line'><span class="c1">// 如果函数没有返回值, 就写Void</span>
</span><span class='line'><span class="c1">// 如果函数没有返回值还可以简写</span>
</span><span class='line'><span class="c1">// 1. () 替代 Void</span>
</span><span class='line'><span class="c1">// 2. 可以省略 -&gt; ()  -&gt;Void</span>
</span><span class='line'><span class="k">func</span> <span class="n">say</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Void</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">say</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">say2</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">say2</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">say3</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">say3</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 有返回值没有参数</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">getNumber</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Int</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">998</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">getNumber</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 有参数没有返回值</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//- (void)sum:(int)a b:(int)b</span>
</span><span class='line'><span class="c1">// Swift2.0中, 会自动将形参列表中的第二个参数开始的参数名称作为便签, 以便于提高阅读性</span>
</span><span class='line'><span class="c1">// Swift2.0之前, 不会这样</span>
</span><span class='line'><span class="k">func</span> <span class="n">sum</span><span class="p">(</span><span class="nl">a</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="nl">b</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">sum</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="nl">b</span><span class="p">:</span> <span class="mi">20</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// 添加标签, 添加外部参数</span>
</span><span class='line'><span class="c1">// x/y称之为外部参数, a/b称之为内部参数</span>
</span><span class='line'><span class="k">func</span> <span class="n">sum2</span><span class="p">(</span><span class="n">x</span> <span class="nl">a</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span><span class="n">y</span> <span class="nl">b</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">sum2</span><span class="p">(</span><span class="nl">x</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="mi">20</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Swift2.0之前的写法, 只要加上#那么a/b既是外部参数, 也是内部参数</span>
</span><span class='line'><span class="c1">//func sum2(#a: Int,#b: Int)</span>
</span><span class='line'><span class="c1">//{</span>
</span><span class='line'><span class="c1">//    print(a + b)</span>
</span><span class='line'><span class="c1">//}</span>
</span><span class='line'><span class="c1">//sum2(a: 10, b: 20)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 有参数有返回值</span>
</span><span class='line'><span class="k">func</span> <span class="n">sum4</span><span class="p">(</span><span class="nl">a</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="nl">b</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">sum4</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="nl">b</span><span class="p">:</span> <span class="mi">30</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift-数组]]></title>
    <link href="http://xiaobenmao.github.io/blog/2015/09/01/swift-shu-zu/"/>
    <updated>2015-09-01T08:44:08+08:00</updated>
    <id>http://xiaobenmao.github.io/blog/2015/09/01/swift-shu-zu</id>
    <content type="html"><![CDATA[<h1>数组</h1>

<h2>简单体验</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;zhangsan&quot;</span><span class="p">,</span> <span class="s">&quot;lisi&quot;</span><span class="p">]</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 遍历每一个元素</span>
</span><span class='line'><span class="k">for</span> <span class="n">a</span> <span class="k">in</span> <span class="n">arr</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 像 OC 一样打印</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">arr</span> <span class="kt">as</span> <span class="bp">NSArray</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h2>数组中保存的对象类型</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// 数组中保存的都是字符串</span>
</span><span class='line'><span class="k">let</span> <span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;zhangsan&quot;</span><span class="p">,</span> <span class="s">&quot;lisi&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 数组中保存的是 NSObject</span>
</span><span class='line'><span class="k">let</span> <span class="n">arr1</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;zhangsan&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>阶段性小结

<ul>
<li>数组使用 [] 定义，这一点与 OC 相同</li>
<li>如果初始化时，所有内容类型一致，则数组中保存的是该类型的内容</li>
<li>如果初始化时，所有内容类型不一致，则数组中保存的是 <code>NSObject</code></li>
</ul>
</li>
</ul>


<h2>常见数组操作</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// 定义只能保存字符串类型数组</span>
</span><span class='line'><span class="k">var</span> <span class="nl">array</span><span class="p">:</span> <span class="p">[</span><span class="n">String</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 初始化数组</span>
</span><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;zhangsan&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 添加元素</span>
</span><span class='line'><span class="n">array</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;lisi&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 删除元素</span>
</span><span class='line'><span class="n">array</span><span class="p">.</span><span class="n">removeAtIndex</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 删除所有元素</span>
</span><span class='line'><span class="c1">// 删除所有, 如果传入true代表删除之后需要保持数组现有的容量, 如果传入false代表不保持当前容量</span>
</span><span class='line'><span class="n">array</span><span class="p">.</span><span class="n">removeAll</span><span class="p">(</span><span class="nl">keepCapacity</span><span class="p">:</span> <span class="nb">true</span><span class="p">)</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">array</span><span class="p">.</span><span class="n">capacity</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">1,注意数组容量的变化</span>
</span><span class='line'><span class="cm"> 1&gt;如果数组容量不够,则在当前基础上乘2</span>
</span><span class='line'><span class="cm"> 2&gt;如果容量足够,继续添加数据,不足则重复那步骤:1&gt;</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mf">0.</span><span class="p">.</span><span class="o">&lt;</span><span class="mi">10</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">array</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;\(i)&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;\(array) --- \(array.capacity)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> 实例化新的数组</span>
</span><span class='line'><span class="cm"> 1,Swift中, 如果一个变量没有初始化是不能被使用的</span>
</span><span class='line'><span class="cm"> 2, [[xx alloc]initWithXXX:]  &lt;==&gt;  (XXX:)</span>
</span><span class='line'><span class="cm">       [[XX alloc]init] &lt;==&gt; ()</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="n">array2</span> <span class="o">=</span> <span class="p">[</span><span class="n">String</span><span class="p">]()</span>
</span><span class='line'><span class="n">array2</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;1&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="nl">array3</span><span class="p">:[</span><span class="n">String</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;a&quot;</span><span class="p">,</span><span class="s">&quot;b&quot;</span><span class="p">]</span>
</span><span class='line'><span class="n">array3</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;2&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 拼接数组</span>
</span><span class='line'><span class="c1">// 注意点: 只有相同类型的数组才能进行合并</span>
</span><span class='line'><span class="c1">// Swift是强语言, 不同数据类型不能进行运算</span>
</span><span class='line'><span class="n">array</span> <span class="o">+=</span> <span class="n">array2</span>
</span><span class='line'>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 打印数组的长度</span>
</span><span class='line'><span class="n">array2</span><span class="p">.</span><span class="n">count</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>阶段性小结

<ul>
<li>如果定义数组时指定了保存对象的类型，择不能向数组中添加其他类型的内容</li>
<li>可以使用 <code>[String]()</code></li>
<li><code>let</code> 定义的数组是<code>不可变的</code></li>
<li><code>var</code> 定义的数组是<code>可变的</code></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift-逻辑分支]]></title>
    <link href="http://xiaobenmao.github.io/blog/2015/09/01/swift-luo-ji-fen-zhi/"/>
    <updated>2015-09-01T08:33:55+08:00</updated>
    <id>http://xiaobenmao.github.io/blog/2015/09/01/swift-luo-ji-fen-zhi</id>
    <content type="html"><![CDATA[<h3>if语句</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">num</span> <span class="o">==</span> <span class="mi">10</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;OK&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//if num {</span>
</span><span class='line'><span class="c1">//    print(&quot;OK&quot;)</span>
</span><span class='line'><span class="c1">//}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Swift中的if的使用方式"基本上"和OC一致

<ul>
<li><code>Swift</code> 中没有 C 语言中的<code>非零即真</code>概念,在Swift中, 条件只能放bool值, 取值只有两个ture/false,在C和OC中, 有一个概念非0即真</li>
<li>在逻辑判断时必须显示地指明具体的判断条件</li>
<li><code>if</code> 语句条件的 <code>()</code> 可以省略</li>
<li>但是 <code>{}</code> 不能省略</li>
</ul>
</li>
</ul>


<!--more-->


<h4>if..else语句</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="k">let</span> <span class="n">num</span>  <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'><span class="k">if</span> <span class="n">num</span> <span class="o">==</span> <span class="mi">5</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;5&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span><span class="k">else</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;10&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">在OC中 if else 可以使用三目运算符来简写</span>
</span><span class='line'><span class="cm">注意: 在做Swift开发中三目运算符用得非常非常多</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="k">let</span> <span class="n">res</span> <span class="o">=</span> <span class="p">(</span><span class="n">num</span> <span class="o">==</span> <span class="mi">5</span><span class="p">)</span> <span class="o">?</span> <span class="mi">5</span> <span class="o">:</span> <span class="mi">10</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Swift中通常使用三目运算符代替if..else</li>
<li>Swift中的 <code>三目</code> 运算保持了和 OC 一致的风格

<h4>switch语句</h4></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">switch</span> <span class="n">num</span><span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="s">&quot;1&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">value</span> <span class="o">=</span> <span class="mi">998</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">5</span><span class="o">:</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="s">&quot;5&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">10</span><span class="o">:</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="s">&quot;10&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">default</span><span class="o">:</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="s">&quot;other&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Swift中的switch

<ul>
<li>后面的()可以省略</li>
<li>OC中的switch如果没有break会穿透, 尽管后面不满足条件,也会执行

<ul>
<li>但是Swift中不会, Swift不会穿透</li>
</ul>
</li>
<li>OC中如果要在case中间定义变量, 必须加上{}确定作用域,

<ul>
<li>而Swift中不用</li>
</ul>
</li>
<li>OC中default的位置可以随便写, 只有所有case都不满足才会执行default

<ul>
<li>而Swift中的default只能放在最后</li>
</ul>
</li>
<li>OC中的default可以省略,

<ul>
<li>Swift中"大部分"情况下不能省略</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>for语句</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">普通for循环, 和OC中基本一致</span>
</span><span class='line'>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="c1">// 0~9</span>
</span><span class='line'><span class="k">for</span> <span class="k">var</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span><span class="n">i</span><span class="o">++</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Swift特色循环</span>
</span><span class='line'><span class="c1">// 0..&lt;10 代表一个区间范围 从0开始到9, 包含头不包含尾</span>
</span><span class='line'><span class="c1">// Swift1.0时 0..10</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mf">0.</span><span class="p">.</span><span class="o">&lt;</span><span class="mi">10</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// _ 代表忽略, 如果不关心某个参数, 就可以使用_</span>
</span><span class='line'><span class="c1">// 在Swift开发中 _ 使用频率非常高</span>
</span><span class='line'><span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mf">0.</span><span class="p">.</span><span class="o">&lt;</span><span class="mi">10</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;lnj&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 0...10 代表一个区间范围 从0开始到10, 包含头又包含尾</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mf">0.</span><span class="p">.</span><span class="mf">.10</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>for语句总结

<ul>
<li>&ldquo;0..&lt;10"中的<code>..&lt;</code>代表左开右闭区间,取值从0到9,左右两个数字跟该符号之间不要有空格</li>
<li>&ldquo;0&hellip;10"中的<code>...</code>代表闭区间,取值从0到10</li>
<li>循环中<code>_</code>下划线代表不关心参数的具体值</li>
</ul>
</li>
</ul>


<h4>while和repeat&hellip;while语句</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">Swift中的while循环和OC中差不多, 而且在开发中很少使用while</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">while</span> <span class="n">a</span> <span class="o">&lt;</span> <span class="mi">10</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>    <span class="n">a</span><span class="o">++</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">Swift升级到2.0之后, do while循环发生了很大的变化</span>
</span><span class='line'><span class="cm">do while没有do了, 因为do被用作捕获异常了</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">repeat</span><span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>    <span class="n">b</span><span class="o">++</span>
</span><span class='line'><span class="p">}</span><span class="k">while</span> <span class="n">b</span><span class="o">&lt;</span><span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<p>
    - while和repeat&hellip;while之后的条件中的括号可以省略
    - oc和c中的do&hellip;while在Swift中改为repeat&hellip;.while
    - Swift中的do用作捕获异常</p>

<h3>可选项<code>?</code>和<code>!</code></h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="k">let</span> <span class="n">url1</span> <span class="o">=</span> <span class="bp">NSURL</span><span class="p">(</span><span class="nl">string</span><span class="p">:</span> <span class="s">&quot;http://www.baidu.com/&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">url1</span> <span class="o">!=</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class='line'>    <span class="bp">NSURLSession</span><span class="p">.</span><span class="n">sharedSession</span><span class="p">().</span><span class="n">dataTaskWithURL</span><span class="p">(</span><span class="n">url</span><span class="o">!</span><span class="p">,</span> <span class="nl">completionHandler</span><span class="p">:</span> <span class="p">{</span> <span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="bp">NSString</span><span class="p">(</span><span class="nl">data</span><span class="p">:</span> <span class="n">data</span><span class="o">!</span><span class="p">,</span> <span class="nl">encoding</span><span class="p">:</span> <span class="n">NSUTF8StringEncoding</span><span class="p">))</span>
</span><span class='line'>    <span class="p">}).</span><span class="n">resume</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在 <code>Swift</code> 中，不是所有的对象实例化方法都会返回值，在实际开发中需要注意实例化函数的返回类型，例如<code>option</code>键+<code>点击NSURL的string方法</code>声明如下:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">convenience</span> <span class="k">init</span><span class="o">?</span><span class="p">(</span><span class="n">string</span> <span class="nl">URLString</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>如果有 <code>?</code> 表示改方法有可能无法实例化到正确的对象

<ul>
<li>这种函数返回的对象，被称为 <code>可选项</code>，即有可能有值，也有可能没有值</li>
<li>实际开发时，需要针对这种对象加以<code>判断</code>，并且在分支内部使用 <code>!</code>，指明改对象确实是存在的</li>
<li>相比在 <code>OC</code> 的开发，尤其在日常练习时，会给定一个能够运行的值，而在实际运行时，一旦条件不满足，会直接闪退，这样用户体验会非常不好</li>
<li>使用可选类型需要注意, 如果直接打印可选了类型, 那么打印出来的值会被Optional包裹</li>
</ul>
</li>
<li>! 代表告诉编译器, 可选类型中一定有值, 强制解析,如果可选类型中没有值, 而又进行了强制解析, 那么程序就会崩溃,因此提供可选绑定的方法改进:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="k">if</span> <span class="k">let</span> <span class="n">url</span> <span class="o">=</span> <span class="bp">NSURL</span><span class="p">(</span><span class="nl">string</span><span class="p">:</span> <span class="s">&quot;http://baidu.com&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="bp">NSURLSession</span><span class="p">.</span><span class="n">sharedSession</span><span class="p">().</span><span class="n">dataTaskWithURL</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="nl">completionHandler</span><span class="p">:</span> <span class="p">{</span> <span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="bp">NSString</span><span class="p">(</span><span class="nl">data</span><span class="p">:</span> <span class="n">data</span><span class="o">!</span><span class="p">,</span> <span class="nl">encoding</span><span class="p">:</span> <span class="n">NSUTF8StringEncoding</span><span class="p">))</span>
</span><span class='line'>    <span class="p">}).</span><span class="n">resume</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>阶段性小结</p>

<ul>
<li>使用 <code>if let 常量 = 可选构造函数</code> 的方式能够确保分支内部常量一定是有值的

<ul>
<li>如果<code>常量</code>有值才执行大括号内部的代码</li>
<li>`常量只是用来表示</li>
</ul>
</li>
<li>并且在分支内部不再需要使用 <code>!</code></li>
<li>这是 <code>Swift</code> 代码中的一个非常重要的使用技巧</li>
</ul>
</li>
<li><p>提示</p>

<ul>
<li>尽管 <code>Swift</code> 提供了类型校验的手段，但是要写出 <code>优雅</code> 的 Swift 代码，还是需要多加练习的，否则一不小心就会出现分支嵌套层次很深的代码</li>
<li>有关 <code>?</code> 和 <code>!</code> 的选择，可以借助 Xcode 的辅助工具，但是强烈建议每次遇到提示时，要多加思考，反复揣摩</li>
</ul>
</li>
</ul>


<h4><code>??</code>的使用</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">name</span><span class="o">?</span><span class="p">.</span><span class="n">lengthOfBytesUsingEncoding</span><span class="p">(</span><span class="n">NSUTF8StringEncoding</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;lnj&quot;</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">name</span><span class="o">?</span><span class="p">.</span><span class="n">lengthOfBytesUsingEncoding</span><span class="p">(</span><span class="n">NSUTF8StringEncoding</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">l</span> <span class="o">+</span> <span class="p">(</span><span class="n">name</span><span class="o">?</span><span class="p">.</span><span class="n">lengthOfBytesUsingEncoding</span><span class="p">(</span><span class="n">NSUTF8StringEncoding</span><span class="p">)</span> <span class="o">??</span> <span class="mi">0</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>阶段性小结

<ul>
<li><code>??</code> 是一个非常有用的操作符，能够快速对 <code>nil</code> 进行判断</li>
<li>如果对象是 <code>nil</code>，则使用 <code>??</code> 后面的值代替前面的 <code>nil</code> 值参与计算</li>
<li>在使用 <code>??</code> 时，整个部分需要使用 <code>()</code> 包装</li>
<li>这一技巧在 <code>UITableView</code> 的数据源方法中尤为重要</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift-初体验]]></title>
    <link href="http://xiaobenmao.github.io/blog/2015/09/01/swift-chu-ti-yan/"/>
    <updated>2015-09-01T08:29:01+08:00</updated>
    <id>http://xiaobenmao.github.io/blog/2015/09/01/swift-chu-ti-yan</id>
    <content type="html"><![CDATA[<h3>初体验</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'>
</span><span class='line'><span class="cm">    创建对象：</span>
</span><span class='line'><span class="cm">    OC： alloc / initWithXXX</span>
</span><span class='line'><span class="cm">    Swift： （XXX：）</span>
</span><span class='line'>
</span><span class='line'><span class="cm">    调方法</span>
</span><span class='line'><span class="cm">    OC [UIColor redColor];</span>
</span><span class='line'><span class="cm">    Swift: UIColor.redColor()</span>
</span><span class='line'>
</span><span class='line'><span class="cm">    枚举：</span>
</span><span class='line'><span class="cm">    OC： UIButtonTypeContactAdd</span>
</span><span class='line'><span class="cm">    Swift: UIButtonType.ContactAdd</span>
</span><span class='line'>
</span><span class='line'><span class="cm">    创建结构体:</span>
</span><span class='line'><span class="cm">    OC CGPointMake()</span>
</span><span class='line'><span class="cm">    Swift : CGPoint()</span>
</span><span class='line'>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="k">let</span> <span class="n">view</span> <span class="o">=</span> <span class="bp">UIView</span><span class="p">(</span><span class="nl">frame</span><span class="p">:</span> <span class="bp">CGRect</span><span class="p">(</span><span class="nl">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">width</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span> <span class="nl">height</span><span class="p">:</span> <span class="mi">100</span><span class="p">))</span>
</span><span class='line'><span class="n">view</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="bp">UIColor</span><span class="p">.</span><span class="n">redColor</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 枚举前面的枚举名称是可以省略的， 开发中一般不会省略</span>
</span><span class='line'><span class="k">let</span>  <span class="n">btn</span> <span class="o">=</span> <span class="bp">UIButton</span><span class="p">(</span><span class="nl">type</span><span class="p">:</span> <span class="n">UIButtonType</span><span class="p">.</span><span class="n">ContactAdd</span><span class="p">)</span>
</span><span class='line'><span class="n">btn</span><span class="p">.</span><span class="n">center</span> <span class="o">=</span> <span class="bp">CGPoint</span><span class="p">(</span><span class="nl">x</span><span class="p">:</span> <span class="mi">50</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="mi">50</span><span class="p">)</span>
</span><span class='line'><span class="n">view</span><span class="p">.</span><span class="n">addSubview</span><span class="p">(</span><span class="n">btn</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h3>常量和变量</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">//: Playground - noun: a place where people can play</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">Swift中定义常量和变量用let/var</span>
</span><span class='line'><span class="cm">let 代表定义一个常量</span>
</span><span class='line'><span class="cm">var 代表定义一个变量</span>
</span><span class='line'><span class="cm">Swift中定义常量和变量不需要写数据类型, 编译器会根据我们后面数据的真实类型自动推断</span>
</span><span class='line'>
</span><span class='line'><span class="cm">Swift开发技巧: 在做Swift开发中, 我们需要经常使用option + click键来查看方法或者变量</span>
</span><span class='line'>
</span><span class='line'><span class="cm">int a = 10;</span>
</span><span class='line'><span class="cm">let a = 10.1</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 常量</span>
</span><span class='line'><span class="k">let</span> <span class="n">num</span> <span class="o">=</span> <span class="mf">10.1</span>
</span><span class='line'><span class="c1">//num = 9.8 // 常量不能修改</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// 变量</span>
</span><span class='line'><span class="c1">// 注意点: Siwft开发中每一条语句后面可以不写分号, 但是写上也不会报错</span>
</span><span class='line'><span class="c1">//        如果同一行有多条语句, 那么每条语句后面必须写上分号</span>
</span><span class='line'><span class="k">var</span> <span class="n">value</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="n">value</span> <span class="o">=</span> <span class="mi">8</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 相当于OC中的NSLog</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>类型转换</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">//: Playground - noun: a place where people can play</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">Swift中不存在隐式类型转换, 所有的类型转换都必须是显示的</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">num1</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'><span class="k">let</span> <span class="n">num2</span> <span class="o">=</span> <span class="mf">9.9</span>
</span><span class='line'><span class="k">let</span> <span class="n">iSum</span> <span class="o">=</span> <span class="n">num1</span> <span class="o">+</span> <span class="n">Int</span><span class="p">(</span><span class="n">num2</span><span class="p">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">dSum</span> <span class="o">=</span> <span class="n">Double</span><span class="p">(</span><span class="n">num1</span><span class="p">)</span> <span class="o">+</span> <span class="n">num2</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Swift是强语言 / OC是弱语言</span>
</span><span class='line'><span class="c1">//let num: Int = 10.1</span>
</span><span class='line'><span class="k">let</span> <span class="nl">num3</span><span class="p">:</span> <span class="n">Int</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'><span class="k">let</span> <span class="nl">num4</span><span class="p">:</span> <span class="n">Int</span> <span class="o">=</span> <span class="n">Int</span><span class="p">(</span><span class="mf">10.1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocoapod-利用pod Trunk发布程序]]></title>
    <link href="http://xiaobenmao.github.io/blog/2015/08/11/cocoapod-li-yong-pod-trunkfa-bu-cheng-xu/"/>
    <updated>2015-08-11T19:21:53+08:00</updated>
    <id>http://xiaobenmao.github.io/blog/2015/08/11/cocoapod-li-yong-pod-trunkfa-bu-cheng-xu</id>
    <content type="html"><![CDATA[<h3>利用pod trunk发布程序</h3>

<hr />

<h5>注册</h5>

<ul>
<li><code>pod trunk register  邮箱 '用户名' --description='电脑描述'</code></li>
</ul>


<h5>查收邮件</h5>

<ul>
<li>如果是QQ邮箱，可能会被放到“垃圾箱”中，并不一定是“收件箱”</li>
<li>点击邮件中的链接：
<a href="https://trunk.cocoapods.org/sessions/verify/xxxx">https://trunk.cocoapods.org/sessions/verify/xxxx</a></li>
</ul>


<!--pod-->


<h5>接下来查看个人信息</h5>

<ul>
<li><code>pod trunk me</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  - Name:     MJ Lee
</span><span class='line'>  - Email:    xxxxxx@qq.com
</span><span class='line'>  - Since:    January 28th, 03:53
</span><span class='line'>  - Pods:     None
</span><span class='line'>  - Sessions:
</span><span class='line'>    - January 28th, 04:28 - June 5th, 04:34. IP: xxx.xxx.xxx.xxx Description: Macbook Pro</span></code></pre></td></tr></table></div></figure>


<ul>
<li>中间可能遇到这种错误</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NoMethodError - undefined method 'last' for #&lt;Netrc::Entry:0x007fc59c246378&gt;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>这时候需要尝试更新gem源或者pod

<ul>
<li><code>sudo gem update --system</code></li>
<li><code>sudo gem install cocoapods</code></li>
<li><code>sudo gem install cocospods-trunk</code></li>
</ul>
</li>
</ul>


<h5>创建podspec文件</h5>

<ul>
<li>接下来需要在项目根路径创建一个podspec文件来描述你的项目信息

<ul>
<li><code>pod spec cretae 文件名</code></li>
<li>比如pod spec cretae MJExtension就会生成一个MJExtension.podspec</li>
</ul>
</li>
</ul>


<h5>填写podspec内容</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Pod::Spec.new do |s|
</span><span class='line'>  s.name         = "MJExtension"
</span><span class='line'>  s.version      = "0.0.1"
</span><span class='line'>  s.summary      = "The fastest and most convenient conversion between JSON and model"
</span><span class='line'>  s.homepage     = "https://github.com/CoderMJLee/MJExtension"
</span><span class='line'>  s.license      = "MIT"
</span><span class='line'>  s.author             = { "MJLee" =&gt; "xxxxx@qq.com" }
</span><span class='line'>  s.social_media_url   = "http://weibo.com/exceptions"
</span><span class='line'>  s.source       = { :git =&gt; "https://github.com/CoderMJLee/MJExtension.git", :tag =&gt; s.version }
</span><span class='line'>  s.source_files  = "MJExtensionExample/MJExtensionExample/MJExtension"
</span><span class='line'>  s.requires_arc = true
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<ul>
<li>值得注意的是，现在的podspec必须有tag，所以最好先打个tag，传到github

<ul>
<li><code>git tag 0.0.1</code></li>
<li><code>git push --tags</code></li>
</ul>
</li>
</ul>


<h5>检测podspec语法</h5>

<ul>
<li><code>pod spec lint MJExtension.podspec</code></li>
</ul>


<h5>发布podspec</h5>

<ul>
<li><code>pod trunk push MJExtension.podspec</code></li>
<li>如果是第一次发布pod，需要去<a href="https://trunk.cocoapods.org/claims/new%E8%AE%A4%E9%A2%86pod">https://trunk.cocoapods.org/claims/new%E8%AE%A4%E9%A2%86pod</a></li>
</ul>


<h5>检测</h5>

<ul>
<li><code>pod setup</code> : 初始化</li>
<li><code>pod repo update</code> : 更新仓库</li>
<li><code>pod search MJExtension</code></li>
</ul>


<h5>仓库更新</h5>

<ul>
<li>如果仓库更新慢，可以考虑更换仓库镜像

<ul>
<li><code>pod repo remove master</code></li>
<li><code>pod repo add master http://git.oschina.net/akuandev/Specs.git</code></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CocoaPod-安装第三方框架(Swift)]]></title>
    <link href="http://xiaobenmao.github.io/blog/2015/08/08/cocoapod-an-zhuang-di-san-fang-kuang-jia-swift/"/>
    <updated>2015-08-08T18:32:38+08:00</updated>
    <id>http://xiaobenmao.github.io/blog/2015/08/08/cocoapod-an-zhuang-di-san-fang-kuang-jia-swift</id>
    <content type="html"><![CDATA[<h1>第三方框架</h1>

<h2>比如:项目中使用到以下第三方框架</h2>

<ul>
<li><code>AFNetworking</code></li>
<li><code>SDWebImage</code></li>
<li><code>SVProgressHUD</code></li>
</ul>


<h2>Pod 安装</h2>

<ul>
<li>git 备份</li>
<li>打开终端</li>
<li><code>$ cd</code> 进入项目目录</li>
<li>输入以下终端命令建立或编辑 <code>Podfile</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim Podfile
</span></code></pre></td></tr></table></div></figure>


<!--pod-->


<ul>
<li>输入以下内容</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>use_frameworks!
</span><span class='line'>pod <span class="s1">&#39;AFNetworking&#39;</span>
</span><span class='line'>pod <span class="s1">&#39;SDWebImage&#39;</span>
</span><span class='line'>pod <span class="s1">&#39;SVProgressHUD&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>:wq</code> 保存退出</li>
</ul>


<blockquote><p>在 Swift 项目中，cocoapod 仅支持以 Framework 方式添加框架，因此需要在 Podfile 中添加 <code>use_frameworks!</code></p></blockquote>

<h2>在终端提交添加的框架</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 将修改添加至暂存区</span>
</span><span class='line'><span class="nv">$ </span>git add .
</span><span class='line'>
</span><span class='line'><span class="c"># 提交修改并且添加备注信息</span>
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;添加第三方框架&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 将修改推送到远程服务器</span>
</span><span class='line'><span class="nv">$ </span>git push
</span></code></pre></td></tr></table></div></figure>


<h2>真机调试设置</h2>

<p><img src="./images/%E4%BA%8C%E7%BB%B4%E7%A0%81/%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95%E8%AE%BE%E7%BD%AE.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CocoaPod-安装第三方库]]></title>
    <link href="http://xiaobenmao.github.io/blog/2015/08/08/cocoapodan-zhuang-di-san-fang-ku/"/>
    <updated>2015-08-08T16:49:32+08:00</updated>
    <id>http://xiaobenmao.github.io/blog/2015/08/08/cocoapodan-zhuang-di-san-fang-ku</id>
    <content type="html"><![CDATA[<h3>更换源</h3>

<ul>
<li>Gem是一个管理Ruby库和程序的标准包,它通过Ruby,Gem(如<a href="http://rubygems.org">http://rubygems.org</a>)源来查找、安装、升级和卸载软件包</li>
</ul>


<h4>ruby的软件源rubygems.org因为使用的亚马逊的云服务，所以被墙了，需要更新一下ruby的源，如下代码将官方的ruby源替换成国内淘宝的源</h4>

<ul>
<li>gem sources &ndash;remove <a href="https://rubygems.org/">https://rubygems.org/</a></li>
<li>gem sources -a <a href="http://ruby.taobao.org/">http://ruby.taobao.org/</a></li>
<li>gem sources -l</li>
</ul>


<!--more-->


<h3>更新升级gem(以后出现这个问题,尝试这个)</h3>

<ul>
<li>sudo gem update &ndash;system</li>
</ul>


<h3>安装,Mac下都自带ruby，使用ruby的gem命令即可下载安装</h3>

<ul>
<li>sudo gem install cocoapods</li>
</ul>


<h3>更换repo镜像为国内服务器</h3>

<ul>
<li>gem sources &ndash;remove <a href="https://rubygems.org/">https://rubygems.org/</a></li>
<li>gem sources -a <a href="http://ruby.taobao.org/">http://ruby.taobao.org/</a></li>
<li>gem sources -l</li>
</ul>


<h3>初始化第三方库信息,第一次操作初始化(以后出现问题,尝试这个)</h3>

<ul>
<li>pod setup</li>
</ul>


<h3>以后更新第三方库信息</h3>

<ul>
<li>pod repo update</li>
</ul>


<h3>搜索</h3>

<ul>
<li>pod search</li>
</ul>


<h3>新建Podfile</h3>

<ul>
<li>vim Podfile: 编辑该文件</li>
<li>输入i进入编辑模式</li>
<li>按Esc:退出编辑模式</li>
<li>输入冒号:和wq保存退出</li>
<li>cat 文件名查看文件</li>
<li>Podfile文件的格式</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="nl">platform</span> <span class="p">:</span><span class="n">ios</span><span class="p">,</span> <span class="s">&quot;8.0&quot;</span>
</span><span class='line'><span class="n">pod</span> <span class="s">&quot;框架名字&quot;</span>
</span><span class='line'><span class="n">pod</span> <span class="s">&quot;框架名字&quot;</span><span class="p">,</span> <span class="s">&quot;~&gt; 版本号&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>解析Podfile,安装第三方框架</h3>

<ul>
<li>pod install</li>
</ul>


<h3>解析Podfile,升级第三方框架</h3>

<h3>以后 使用CocoaPods过程中出现了莫名奇妙的问题</h3>

<ul>
<li>sudo gem update &ndash;system</li>
<li>sudo gem install cocoapods</li>
<li><p>pod setup</p></li>
<li><p>查找支持cocopod的框架</p>

<ul>
<li>如果github上的项目存在spec文件</li>
<li>在github搜索CocoaPods,找到CocoaPods/Specs,选择spec文件夹查看</li>
<li>官网:<a href="https://cocoapods.org%E6%9F%A5%E6%89%BE">https://cocoapods.org%E6%9F%A5%E6%89%BE</a></li>
</ul>
</li>
</ul>


<p><a href="http://www.devtang.com/blog/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency/">http://www.devtang.com/blog/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NSRunLoop-常驻线程]]></title>
    <link href="http://xiaobenmao.github.io/blog/2015/08/02/nsrunloop-chang-zhu-xian-cheng/"/>
    <updated>2015-08-02T12:06:26+08:00</updated>
    <id>http://xiaobenmao.github.io/blog/2015/08/02/nsrunloop-chang-zhu-xian-cheng</id>
    <content type="html"><![CDATA[<ul>
<li>线程一结束就会进入消亡状态,如果定义为属性进行强引用,在进程结束也会处在消亡状态</li>
<li>保持线程不消亡:

<ul>
<li>如果经常做一些耗时操作,可以保持线程不死</li>
<li>或者需要一个线程一直在后天进行扫描等监听操作,也可以线程不消亡</li>
<li>可以通过自定义线程,重写dealloc方法,测验线程是否消亡</li>
</ul>
</li>
</ul>


<!--more-->


<h3>为保持线程不消亡,可以添加NSRunLoop</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="kr">thread</span> <span class="o">=</span> <span class="p">[[</span><span class="n">WQThread</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget</span><span class="p">:</span><span class="nb">self</span> <span class="nl">selector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">execute</span><span class="p">)</span> <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="kr">thread</span> <span class="n">start</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">execute</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 懒加载runLoop,并且添加source.向runLoop中添加source或者timer或者obsever</span>
</span><span class='line'>    <span class="c1">// 如果为空则立即退出</span>
</span><span class='line'>    <span class="p">[[</span><span class="bp">NSRunLoop</span> <span class="n">currentRunLoop</span><span class="p">]</span> <span class="nl">addPort</span><span class="p">:[</span><span class="bp">NSPort</span> <span class="n">port</span><span class="p">]</span> <span class="nl">forMode</span><span class="p">:</span><span class="n">NSDefaultRunLoopMode</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// 启动runLoop,一值在循环处理各种事件,所以线程不会消亡</span>
</span><span class='line'>    <span class="p">[[</span><span class="bp">NSRunLoop</span> <span class="n">currentRunLoop</span><span class="p">]</span> <span class="n">run</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;---------&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// 不传模式,就为默认模式,调用run相当于下面,运行时间为无限大</span>
</span><span class='line'>    <span class="c1">//[[NSRunLoop currentRunLoop] runMode:NSDefaultRunLoopMode beforeDate:[NSDate distantFuture]];</span>
</span><span class='line'>    <span class="c1">//[[NSRunLoop currentRunLoop] runUntilDate:[NSDate distantFuture]];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>以下会会实现,但是不推荐

<ul>
<li>当runLoop循环开启的时候,有内外两个循环</li>
<li>线程外部循环退出需要另加标记</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">execute</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;----------run----%@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="bp">NSThread</span> <span class="n">currentThread</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 线程一刚开始一直不停的检测mode是否为空,默认不为空</span>
</span><span class='line'>        <span class="c1">// 进入检测是否有source或者timer,此时没有则退出</span>
</span><span class='line'>        <span class="c1">// 当线程有source或者timer或者obsever时开启runLoop循环</span>
</span><span class='line'>        <span class="p">[[</span><span class="bp">NSRunLoop</span> <span class="n">currentRunLoop</span><span class="p">]</span> <span class="n">run</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;---------&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">touchesBegan:</span><span class="p">(</span><span class="bp">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="nv">touches</span> <span class="nf">withEvent:</span><span class="p">(</span><span class="bp">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="nv">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 此时给self.thread即上面的线程添加一个source源,此时</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="nl">performSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">test2</span><span class="p">)</span> <span class="nl">onThread</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="kr">thread</span> <span class="nl">withObject</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">waitUntilDone</span><span class="p">:</span><span class="nb">NO</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>`</p>

<ul>
<li>以下为错误的状态</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 这种方式虽然能保住线程的名，但是这条线程就无法处理其他行为（事件）</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">execute</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;----------run----%@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="bp">NSThread</span> <span class="n">currentThread</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// 当前线程永远在处理这行代码</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;---------&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>让图片延迟显示,比如在控件滚动结束后再显示,可以通过修改图片显示的摸式来实现</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">useImageView</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 只在NSDefaultRunLoopMode模式下显示图片</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">imageView</span> <span class="nl">performSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">setImage</span><span class="p">:)</span> <span class="nl">withObject</span><span class="p">:[</span><span class="bp">UIImage</span> <span class="nl">imageNamed</span><span class="p">:</span><span class="s">@&quot;placeholder&quot;</span><span class="p">]</span> <span class="nl">afterDelay</span><span class="p">:</span><span class="mf">3.0</span> <span class="nl">inModes</span><span class="p">:</span><span class="l">@[</span><span class="n">NSDefaultRunLoopMode</span><span class="l">]</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NSRunLoop-运行逻辑]]></title>
    <link href="http://xiaobenmao.github.io/blog/2015/08/01/nsrunloop-and-nsruntime/"/>
    <updated>2015-08-01T04:20:43+08:00</updated>
    <id>http://xiaobenmao.github.io/blog/2015/08/01/nsrunloop-and-nsruntime</id>
    <content type="html"><![CDATA[<ul>
<li>RunLoop相关类</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">Core</span> <span class="n">Foundation</span><span class="err">中关于</span><span class="n">RunLoop</span><span class="err">的</span><span class="mi">5</span><span class="err">个类</span>
</span><span class='line'><span class="n">CFRunLoopRef</span> <span class="c1">// 运行循环</span>
</span><span class='line'><span class="n">CFRunLoopModeRef</span> <span class="c1">// 运行模式</span>
</span><span class='line'><span class="n">CFRunLoopSourceRef</span> <span class="c1">// 事件源</span>
</span><span class='line'><span class="n">CFRunLoopTimerRef</span>   <span class="c1">// 定时器timer</span>
</span><span class='line'><span class="n">CFRunLoopObserverRef</span>    <span class="c1">// 事件监听</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p><img src="http://xiaobenmao.github.io/images/RunLoop.png" alt="" />￼</p>

<ul>
<li><p>CFRunLoopModeRef代表RunLoop的运行模式</p>

<ul>
<li>一个 RunLoop 包含若干个Mode，每个Mode又包含若干个Source/Timer/Observer</li>
<li>每次RunLoop启动时，只能指定其中一个 Mode，这个Mode被称作 CurrentMode</li>
<li>如果需要切换Mode，只能退出Loop，再重新指定一个Mode进入</li>
<li>这样做主要是为了分隔开不同组的Source/Timer/Observer，让其互不影响</li>
</ul>
</li>
<li><p>CFRunLoop的源文件是c的,开源的</p></li>
</ul>


<p><img src="http://xiaobenmao.github.io/images/runLoop%E6%BA%90%E6%96%87%E4%BB%B6.png" alt="" />￼</p>

<p><img src="http://xiaobenmao.github.io/images/runLoop%E5%A4%84%E7%90%86%E9%80%BB%E8%BE%91.png" alt="" />￼</p>

<h3>第0步:</h3>

<ul>
<li>通过[NSRunLoop currentRunLoop]<code>懒加载</code>当前运行循环

<ul>
<li>主线程中的为<code>自动创建并运行</code>currentRunLoop或者mainRunLoop</li>
<li>子线程中的需要<code>手动创建并运行run</code>
<img src="http://xiaobenmao.github.io/images/currentRunLoop.png" alt="" />￼</li>
</ul>
</li>
</ul>


<h3>第一步:</h3>

<ul>
<li>循环开始,runLoop字面意思运行循环,跑圈,实际是<code>do...while循环</code></li>
<li>当退出标记不为NO时,一直死循环

<ul>
<li>kCFRunLoopRunStopped</li>
<li>kCFRunLoopRunFinished
<img src="http://xiaobenmao.github.io/images/%E5%BE%AA%E7%8E%AF%E5%BC%80%E5%A7%8B.png" alt="" />￼</li>
</ul>
</li>
</ul>


<h3>第二步:</h3>

<ul>
<li>RunLoop创建默认模式</li>
<li>先查找当前运行模式,在do&hellip;while主循环开始的时候传入<code>默认模式</code></li>
<li><p>可以修改运行循环的模式
<img src="http://xiaobenmao.github.io/images/%E6%9F%A5%E6%89%BE%E5%BD%93%E5%89%8D%E8%BF%90%E8%A1%8Cmode.png" alt="" />￼</p></li>
<li><p>如果当前currentRunLoop不为空,</p></li>
<li>并且当前模式中,CFRUnLoopModeIsEmpty:

<ul>
<li>resources0不为空</li>
<li>resources1不为空</li>
<li>timer不为空</li>
</ul>
</li>
<li><p>则开始RunLoop运行循环入口CFRunLoopRun</p></li>
<li><p>RunLoop只能选择一个Mode启动，</p>

<ul>
<li>如果当前Mode中没有任何Source(sources0,sources1)、Timer，那么就直接退出RunLoop</li>
<li>在查找当前模式时没有判断observer,所以即使只添加了observer了,运行循环也会退出
<img src="http://xiaobenmao.github.io/images/%E5%88%A4%E6%96%AD%E5%BD%93%E5%89%8D%E8%BF%90%E8%A1%8C%E5%BE%AA%E7%8E%AFmode%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA.png" alt="" />￼
<img src="http://xiaobenmao.github.io/images/%E5%88%A4%E6%96%AD%E5%BD%93%E5%89%8D%E8%BF%90%E8%A1%8C%E5%BE%AA%E7%8E%AFmode%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA1.png" alt="" />￼</li>
</ul>
</li>
</ul>


<h3>第三步:</h3>

<ul>
<li>开始进入RunLoop循环</li>
</ul>


<p><img src="http://xiaobenmao.github.io/images/RunLoop.png" alt="" />￼</p>

<ul>
<li>以下为c语言层次:CFRunLoopRun函数为主要代码</li>
</ul>


<p><img src="http://xiaobenmao.github.io/images/runLoop%E5%85%A5%E5%8F%A3.png" alt="" />￼</p>

<p><img src="http://xiaobenmao.github.io/images/%E6%A0%B8%E5%BF%83%E4%BB%A3%E7%A0%81.png" alt="" />￼</p>

<p><img src="http://xiaobenmao.github.io/images/%E7%AD%89%E5%BE%85%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E6%B6%88%E6%81%AF.png" alt="" />￼</p>

<p><img src="http://xiaobenmao.github.io/images/%E5%94%A4%E9%86%92runLoop%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86.png" alt="" />￼</p>

<h3>补充:</h3>

<ul>
<li>自动释放池什么时候释放？

<ul>
<li>通过Observer监听RunLoop的状态,一旦监听到RunLoop<code>即将进入</code>睡眠等待状态,就释放自动释放池（kCFRunLoopBeforeWaiting)</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="bp">NSRunLoop</span> <span class="n">currentRunLoop</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">打印结果:</span>
</span><span class='line'><span class="cm">&lt;CFRunLoopObserver 0x7fe62250c600 [0x104a4d180]&gt;{valid = Yes, activities = 0xa0, repeats = Yes, order = 2147483647, callout = _wrapRunLoopWithAutoreleasePoolHandler (0x104b96a43), context = &lt;CFArray 0x7fe62250c530 [0x104a4d180]&gt;{type = mutable-small, count = 0, values = ()}}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">&lt;CFRunLoopObserver 0x7fe62250c560 [0x104a4d180]&gt;{valid = Yes, activities = 0x1, repeats = Yes, order = -2147483647, callout = _wrapRunLoopWithAutoreleasePoolHandler (0x104b96a43), context = &lt;CFArray 0x7fe62250c530 [0x104a4d180]&gt;{type = mutable-small, count = 0, values = ()}}</span>
</span><span class='line'>
</span><span class='line'><span class="cm"> 以上两个_wrapRunLoopWithAutoreleasePoolHandler中activitier的地址分别为:0X1和0Xa0</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">activities = 0x1 == 1 //即将进入runLoop</span>
</span><span class='line'><span class="cm">activities = 0xa0 == 160</span>
</span><span class='line'><span class="cm">160 = kCFRunLoopBeforeWaiting(32) + kCFRunLoopExit(128)</span>
</span><span class='line'>
</span><span class='line'><span class="cm">在运行循环即将进入进入睡眠的时候释放自动释放池,并创建一个新的释放池</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'>
</span><span class='line'><span class="cm"> kCFRunLoopEntry = (1UL &lt;&lt; 0),  1</span>
</span><span class='line'><span class="cm"> kCFRunLoopBeforeTimers = (1UL &lt;&lt; 1), 2</span>
</span><span class='line'><span class="cm"> kCFRunLoopBeforeSources = (1UL &lt;&lt; 2), 4</span>
</span><span class='line'><span class="cm"> kCFRunLoopBeforeWaiting = (1UL &lt;&lt; 5), 32</span>
</span><span class='line'><span class="cm"> kCFRunLoopAfterWaiting = (1UL &lt;&lt; 6), 64</span>
</span><span class='line'><span class="cm"> kCFRunLoopExit = (1UL &lt;&lt; 7), 128</span>
</span><span class='line'>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="err">*/</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在子线程开启RunLoop的时候最好放在一个大的自动释放池中</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 子线程回调函数</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">execute</span><span class="p">{</span>
</span><span class='line'>    <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 开启runLoop代码</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://xiaobenmao.github.io/images/runLoop%E5%A4%84%E7%90%86%E9%80%BB%E8%BE%91%E5%AE%98%E6%96%B9%E5%9B%BE%E7%89%87.png" alt="" />￼
<img src="http://xiaobenmao.github.io/images/runLoop%E5%A4%84%E7%90%86%E9%80%BB%E8%BE%91%E5%AE%98%E6%96%B9%E8%A7%A3%E9%87%8A.png" alt="" />￼</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CoreAnimation-粒子效果]]></title>
    <link href="http://xiaobenmao.github.io/blog/2014/08/06/coreanimation-li-zi-xiao-guo/"/>
    <updated>2014-08-06T09:15:04+08:00</updated>
    <id>http://xiaobenmao.github.io/blog/2014/08/06/coreanimation-li-zi-xiao-guo</id>
    <content type="html"><![CDATA[<h4>粒子动画</h4>

<p>效果：随机绘制一条路径，点击开始按钮，粒子动画</p>

<h4>实现思路</h4>

<ul>
<li><p>1.搞个画板绘制路径，自定义view</p></li>
<li><p>2.给自定义view添加pan手势，和创建复制图层和圆形图层，只需要设置一次，在awakeFromNib方法中设置。</p></li>
</ul>


<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class="c1">// 添加pan手势</span>
</span><span class='line'>    <span class="bp">UIPanGestureRecognizer</span> <span class="o">*</span><span class="n">pan</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIPanGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget</span><span class="p">:</span><span class="nb">self</span> <span class="nl">action</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">pan</span><span class="p">:)];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="nl">addGestureRecognizer</span><span class="p">:</span><span class="n">pan</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 创建复制图层</span>
</span><span class='line'>    <span class="bp">CAReplicatorLayer</span> <span class="o">*</span><span class="n">repLayer</span> <span class="o">=</span> <span class="p">[</span><span class="bp">CAReplicatorLayer</span> <span class="n">layer</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">repLayer</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">bounds</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">layer</span> <span class="nl">addSublayer</span><span class="p">:</span><span class="n">repLayer</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 创建粒子图层</span>
</span><span class='line'>    <span class="bp">CALayer</span> <span class="o">*</span><span class="n">layer</span> <span class="o">=</span> <span class="p">[</span><span class="bp">CALayer</span> <span class="n">layer</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">layer</span><span class="p">.</span><span class="n">cornerRadius</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">layer</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="o">-</span><span class="mi">100</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">layer</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">whiteColor</span><span class="p">].</span><span class="bp">CGColor</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">repLayer</span> <span class="nl">addSublayer</span><span class="p">:</span><span class="n">layer</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">_dotLayer</span> <span class="o">=</span> <span class="n">layer</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>3.因为核心动画只能设置一个路径，因此只能创建一个路径，懒加载路径。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">UIBezierPath</span> <span class="o">*</span><span class="p">)</span><span class="nf">path</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_path</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_path</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIBezierPath</span> <span class="n">bezierPath</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">_path</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>4.在一开始拖动的时候，保存路径起点，设置路径起点，拖动的时候每次添加线到某个点。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class="bp">CGPoint</span> <span class="n">curP</span> <span class="o">=</span> <span class="p">[</span><span class="n">pan</span> <span class="nl">locationInView</span><span class="p">:</span><span class="nb">self</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">pan</span><span class="p">.</span><span class="n">state</span> <span class="o">==</span> <span class="n">UIGestureRecognizerStateBegan</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">_startP</span> <span class="o">=</span> <span class="n">curP</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">path</span> <span class="nl">moveToPoint</span><span class="p">:</span><span class="n">_startP</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">path</span> <span class="nl">addLineToPoint</span><span class="p">:</span><span class="n">curP</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="n">setNeedsDisplay</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>5.路径绘制好了，点击开始按钮的时候，添加动画到图层</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">CAKeyframeAnimation</span> <span class="o">*</span><span class="n">anim</span> <span class="o">=</span> <span class="p">[</span><span class="bp">CAKeyframeAnimation</span> <span class="n">animation</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">anim</span><span class="p">.</span><span class="n">keyPath</span> <span class="o">=</span> <span class="s">@&quot;position&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">anim</span><span class="p">.</span><span class="n">duration</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>    <span class="n">anim</span><span class="p">.</span><span class="n">path</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="bp">CGPath</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">anim</span><span class="p">.</span><span class="n">repeatCount</span> <span class="o">=</span> <span class="n">MAXFLOAT</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">_dotLayer</span> <span class="nl">addAnimation</span><span class="p">:</span><span class="n">anim</span> <span class="nl">forKey</span><span class="p">:</span><span class="s">@&quot;anim&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">anim</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>6.复制图层</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">repLayer</span><span class="p">.</span><span class="n">instanceCount</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
</span><span class='line'><span class="n">repLayer</span><span class="p">.</span><span class="n">instanceDelay</span> <span class="o">=</span> <span class="mi">4</span> <span class="o">/</span> <span class="mf">20.0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 设置子层颜色</span>
</span><span class='line'><span class="n">repLayer</span><span class="p">.</span><span class="n">instanceColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="nl">colorWithRed</span><span class="p">:</span><span class="mi">0</span> <span class="nl">green</span><span class="p">:</span><span class="mi">1</span> <span class="nl">blue</span><span class="p">:</span><span class="mi">0</span> <span class="nl">alpha</span><span class="p">:</span><span class="mi">1</span><span class="p">].</span><span class="bp">CGColor</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 设置子层颜色绿色通道偏移量</span>
</span><span class='line'><span class="n">repLayer</span><span class="p">.</span><span class="n">instanceGreenOffset</span> <span class="o">=</span> <span class="o">-</span><span class="mf">0.03</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>7.重绘
清空路径，重新绘制，移除图层动画。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">_path</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">_dotLayer</span> <span class="nl">removeAnimationForKey</span><span class="p">:</span><span class="s">@&quot;anim&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span> <span class="n">setNeedsDisplay</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://xiaobenmao.github.io/images/%E7%B2%92%E5%AD%90%E6%95%88%E6%9E%9C.png" alt="" /></p>

<ul>
<li>完整代码如下</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">DrawView</span> : <span class="bp">UIView</span>
</span><span class='line'><span class="c1">// 开始动画</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">reDraw</span><span class="p">;</span>
</span><span class='line'><span class="c1">// 重绘</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">startA</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &quot;DrawView.h&quot;</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">DrawView</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**路径*/</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">UIBezierPath</span> <span class="o">*</span><span class="n">path</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**复制层*/</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">CAReplicatorLayer</span> <span class="o">*</span><span class="n">replicatorL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**原始层*/</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">CALayer</span> <span class="o">*</span><span class="n">dotLayer</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">DrawView</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">awakeFromNib</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 添加手势</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="n">addPanGR</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">#pragma mark - 懒加载</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 此处只需要添加一条路径,原始层添加的帧动画路径只有一个,所以复制出来的层都会由相同的动画路径,</span>
</span><span class='line'><span class="c1">// 只是前后间隔延迟,每一个点是一个子层,重叠起来的</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">UIBezierPath</span> <span class="o">*</span><span class="p">)</span><span class="nf">path</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_path</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_path</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIBezierPath</span> <span class="n">bezierPath</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_path</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">CAReplicatorLayer</span> <span class="o">*</span><span class="p">)</span><span class="nf">replicatorL</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_replicatorL</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>         <span class="n">_replicatorL</span> <span class="o">=</span> <span class="p">[</span><span class="bp">CAReplicatorLayer</span> <span class="n">layer</span><span class="p">];</span>
</span><span class='line'>        <span class="n">_replicatorL</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">bounds</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_replicatorL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">CALayer</span> <span class="o">*</span><span class="p">)</span><span class="nf">dotLayer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_dotLayer</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_dotLayer</span> <span class="o">=</span> <span class="p">[</span><span class="bp">CALayer</span> <span class="n">layer</span><span class="p">];</span>
</span><span class='line'>        <span class="n">_dotLayer</span><span class="p">.</span><span class="n">position</span> <span class="o">=</span> <span class="n">CGPointMake</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span> <span class="o">-</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">_dotLayer</span><span class="p">.</span><span class="n">bounds</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">_dotLayer</span><span class="p">.</span><span class="n">cornerRadius</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">_dotLayer</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">blueColor</span><span class="p">].</span><span class="bp">CGColor</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_dotLayer</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">#pragma mark - 添加手势</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addPanGR</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">UIPanGestureRecognizer</span> <span class="o">*</span><span class="n">pan</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIPanGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span><span class="nl">initWithTarget</span><span class="p">:</span><span class="nb">self</span> <span class="nl">action</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">pan</span><span class="p">:)];</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="nl">addGestureRecognizer</span><span class="p">:</span><span class="n">pan</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">_count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">pan:</span><span class="p">(</span><span class="bp">UIPanGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="nv">pan</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 获取当前点</span>
</span><span class='line'>    <span class="bp">CGPoint</span> <span class="n">curP</span> <span class="o">=</span> <span class="p">[</span><span class="n">pan</span> <span class="nl">locationInView</span><span class="p">:</span><span class="nb">self</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 画线</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">pan</span><span class="p">.</span><span class="n">state</span> <span class="o">==</span> <span class="n">UIGestureRecognizerStateBegan</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">path</span> <span class="nl">moveToPoint</span><span class="p">:</span><span class="n">curP</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// 手指不断移动,当前点连线到上一点,</span>
</span><span class='line'>    <span class="p">[</span><span class="n">_path</span> <span class="nl">addLineToPoint</span><span class="p">:</span><span class="n">curP</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// 重绘画出当前路径</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="n">setNeedsDisplay</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 用来记录触摸点滑动中个数,设置复制层中复制的个数,防止,路径太长,动画太少</span>
</span><span class='line'>    <span class="n">_count</span> <span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addReplicatorLayer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 懒加载添加复制层</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">layer</span> <span class="nl">addSublayer</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">replicatorL</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// 懒加载添加原始层</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">replicatorL</span> <span class="nl">addSublayer</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">dotLayer</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 添加动画</span>
</span><span class='line'>    <span class="bp">CAKeyframeAnimation</span> <span class="o">*</span><span class="n">keyframe</span> <span class="o">=</span> <span class="p">[</span><span class="bp">CAKeyframeAnimation</span> <span class="n">animation</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">keyframe</span><span class="p">.</span><span class="n">keyPath</span> <span class="o">=</span> <span class="s">@&quot;position&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">keyframe</span><span class="p">.</span><span class="n">path</span> <span class="o">=</span> <span class="n">_path</span><span class="p">.</span><span class="bp">CGPath</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">keyframe</span><span class="p">.</span><span class="n">repeatCount</span> <span class="o">=</span> <span class="n">MAXFLOAT</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">duration</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">keyframe</span><span class="p">.</span><span class="n">duration</span>  <span class="o">=</span> <span class="n">duration</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">_dotLayer</span> <span class="nl">addAnimation</span><span class="p">:</span><span class="n">keyframe</span> <span class="nl">forKey</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 设置复制层属性,必须先添加动画再复制</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="n">_count</span> <span class="o">/</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>    <span class="n">_replicatorL</span><span class="p">.</span><span class="n">instanceCount</span> <span class="o">=</span> <span class="n">num</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//NSLog(@&quot;%zd&quot;,_replicatorL.instanceCount);</span>
</span><span class='line'>    <span class="n">_replicatorL</span><span class="p">.</span><span class="n">instanceDelay</span> <span class="o">=</span> <span class="n">duration</span> <span class="o">/</span> <span class="n">num</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - 开始动画和重绘</span>
</span><span class='line'><span class="c1">// 开始动画</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">startA</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="n">addReplicatorLayer</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 重画</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">reDraw</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 清空绘图信息</span>
</span><span class='line'>    <span class="n">_path</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// 把原始层移除父控件,复制出来的层也会移除</span>
</span><span class='line'>    <span class="p">[</span><span class="n">_dotLayer</span> <span class="n">removeFromSuperlayer</span><span class="p">];</span>
</span><span class='line'>    <span class="n">_dotLayer</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// 清空数量</span>
</span><span class='line'>    <span class="n">_count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="n">setNeedsDisplay</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 重绘</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">drawRect:</span><span class="p">(</span><span class="bp">CGRect</span><span class="p">)</span><span class="nv">rect</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">_path</span> <span class="n">stroke</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> : <span class="bp">UIViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &quot;ViewController.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;DrawView.h&quot;</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ViewController</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 点击重绘</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">reDraw:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">DrawView</span> <span class="o">*</span><span class="n">drView</span> <span class="o">=</span> <span class="p">(</span><span class="n">DrawView</span> <span class="o">*</span><span class="p">)</span> <span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">drView</span> <span class="n">reDraw</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 点击开始</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">startA:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">DrawView</span> <span class="o">*</span><span class="n">drView</span> <span class="o">=</span> <span class="p">(</span><span class="n">DrawView</span> <span class="o">*</span><span class="p">)</span> <span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">drView</span> <span class="n">startA</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://xiaobenmao.github.io/images/%E7%B2%92%E5%AD%90%E6%95%88%E6%9E%9Cstoryboard.png" alt="" /></p>

<ul>
<li>将控制器的view作为画板,自定义继承于view的类,给控制器修改class为自定义类</li>
<li><code>核心动画只能设置一个路径</code>,所以懒加载一个路径,</li>
<li>一条路径可以不连贯,设置多个起点,分成多段</li>
<li>在重绘的时候,可以通过设置动画的代理时的key值,将原始层的动画删除</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">_dotLayer</span> <span class="nl">addAnimation</span><span class="p">:</span><span class="n">keyframe</span> <span class="nl">forKey</span><span class="p">:</span><span class="s">@&quot;an&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">keyframe</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 重绘的时候</span>
</span><span class='line'><span class="c1">// 原始层没有动画,复制的子层也没有动画</span>
</span><span class='line'><span class="p">[</span><span class="n">_dotLayer</span> <span class="nl">removeAnimationForKey</span><span class="p">:</span><span class="s">@&quot;an&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>也可以将原始层删除,用到时重新加载</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CoreAnimation-折叠图片]]></title>
    <link href="http://xiaobenmao.github.io/blog/2014/08/05/coreanimation-zhe-die-tu-pian-contentsrect/"/>
    <updated>2014-08-05T08:33:06+08:00</updated>
    <id>http://xiaobenmao.github.io/blog/2014/08/05/coreanimation-zhe-die-tu-pian-contentsrect</id>
    <content type="html"><![CDATA[<h4>图片折叠效果</h4>

<!--more-->


<p><img src="http://xiaobenmao.github.io/images/%E6%8A%98%E5%8F%A0%E5%9B%BE%E7%89%87%E5%89%8D.png" alt="" /></p>

<p><img src="http://xiaobenmao.github.io/images/%E6%8A%98%E5%8F%A0%E5%9B%BE%E7%89%87%E5%90%8E.png" alt="" /></p>

<p><img src="http://xiaobenmao.github.io/images/%E6%8A%98%E5%8F%A0%E5%9B%BE%E7%89%87-%E6%8E%92%E5%88%97%E5%9B%BE%E7%89%87.png" alt="" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;ViewController.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span>
</span><span class='line'><span class="c1">//@property (weak, nonatomic) IBOutlet UIImageView *test1View;</span>
</span><span class='line'><span class="c1">//@property (weak, nonatomic) IBOutlet UIImageView *testView;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">weak</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="bp">UIImageView</span> <span class="o">*</span><span class="n">topView</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">weak</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="bp">UIImageView</span> <span class="o">*</span><span class="n">bottomView</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">weak</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="bp">UIView</span> <span class="o">*</span><span class="n">dragView</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">weak</span><span class="p">)</span> <span class="bp">CAGradientLayer</span> <span class="o">*</span><span class="n">gradientL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> 两张图片的顺序,不能错,否则,旋转过九十度后就会看不到</span>
</span><span class='line'>
</span><span class='line'><span class="cm"> 阴影:渐变层的渐变色colors属性必须有颜色</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ViewController</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> *一张图片必须要通过两个控件展示，旋转的时候，只旋转上部分控件</span>
</span><span class='line'><span class="cm"> *如何让一张完整的图片通过两个控件显示?</span>
</span><span class='line'><span class="cm"> *  1&gt;通过layer的contentsRect属性控制图片的显示内容</span>
</span><span class='line'><span class="cm"> *  2&gt;如果快速把两个控件拼接成一个完整图片</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">//    // 通过上下接壤排列</span>
</span><span class='line'><span class="c1">//    self.testView.layer.contentsRect = CGRectMake(0, 0, 1, 0.5);</span>
</span><span class='line'><span class="c1">//    self.test1View.layer.contentsRect = CGRectMake(0, 0.5, 1, 0.5);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 快速排列</span>
</span><span class='line'>    <span class="c1">// 通过设置contentsRect可以设置图片显示的尺寸，取值0~1</span>
</span><span class='line'>    <span class="n">_topView</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">contentsRect</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">);</span>
</span><span class='line'>    <span class="n">_topView</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">anchorPoint</span> <span class="o">=</span> <span class="n">CGPointMake</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">_bottomView</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">contentsRect</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">);</span>
</span><span class='line'>    <span class="n">_bottomView</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">anchorPoint</span> <span class="o">=</span> <span class="n">CGPointMake</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 添加手势</span>
</span><span class='line'>    <span class="bp">UIPanGestureRecognizer</span> <span class="o">*</span><span class="n">pan</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIPanGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget</span><span class="p">:</span><span class="nb">self</span> <span class="nl">action</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">pan</span><span class="p">:)];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">_dragView</span> <span class="nl">addGestureRecognizer</span><span class="p">:</span><span class="n">pan</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 渐变图层</span>
</span><span class='line'>    <span class="bp">CAGradientLayer</span> <span class="o">*</span><span class="n">gradientL</span> <span class="o">=</span> <span class="p">[</span><span class="bp">CAGradientLayer</span> <span class="n">layer</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 注意图层需要设置尺寸</span>
</span><span class='line'>    <span class="n">gradientL</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">_bottomView</span><span class="p">.</span><span class="n">bounds</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">gradientL</span><span class="p">.</span><span class="n">opacity</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// 设置渐变色,从无色到黑色,需要类型转换</span>
</span><span class='line'>    <span class="c1">// 渐变层的渐变色排列在所添加的层上,这里开始的时候不需要显示,当旋转的时候慢慢出现,所以通过透明度来修改</span>
</span><span class='line'>    <span class="n">gradientL</span><span class="p">.</span><span class="n">colors</span> <span class="o">=</span> <span class="l">@[</span><span class="p">(</span><span class="kt">id</span><span class="p">)[</span><span class="bp">UIColor</span> <span class="n">clearColor</span><span class="p">].</span><span class="bp">CGColor</span><span class="p">,(</span><span class="kt">id</span><span class="p">)[</span><span class="bp">UIColor</span> <span class="n">blackColor</span><span class="p">].</span><span class="bp">CGColor</span><span class="l">]</span><span class="p">;</span>
</span><span class='line'>    <span class="n">_gradientL</span> <span class="o">=</span> <span class="n">gradientL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">_bottomView</span><span class="p">.</span><span class="n">layer</span> <span class="nl">addSublayer</span><span class="p">:</span><span class="n">gradientL</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 拖动的时候旋转上部分内容，200 M_PI</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">pan:</span><span class="p">(</span><span class="bp">UIPanGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="nv">pan</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 获取偏移量</span>
</span><span class='line'>   <span class="bp">CGPoint</span> <span class="n">transP</span> <span class="o">=</span> <span class="p">[</span><span class="n">pan</span> <span class="nl">translationInView</span><span class="p">:</span><span class="n">_dragView</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 旋转角度,往下逆时针旋转,可向下滑动区域为dragView的高度,当y偏移200时,旋转M_Pi</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">angle</span> <span class="o">=</span> <span class="o">-</span><span class="n">transP</span><span class="p">.</span><span class="n">y</span> <span class="o">/</span> <span class="mf">200.0</span> <span class="o">*</span> <span class="n">M_PI</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">CATransform3D</span> <span class="n">transfrom</span> <span class="o">=</span> <span class="n">CATransform3DIdentity</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// m34增加旋转的立体感，近大远小,d：距离图层的距离</span>
</span><span class='line'>    <span class="n">transfrom</span><span class="p">.</span><span class="n">m34</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">/</span> <span class="mf">500.0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">transfrom</span> <span class="o">=</span> <span class="n">CATransform3DRotate</span><span class="p">(</span><span class="n">transfrom</span><span class="p">,</span> <span class="n">angle</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">_topView</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">transform</span> <span class="o">=</span> <span class="n">transfrom</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 设置阴影效果</span>
</span><span class='line'>    <span class="n">_gradientL</span><span class="p">.</span><span class="n">opacity</span> <span class="o">=</span> <span class="n">transP</span><span class="p">.</span><span class="n">y</span> <span class="o">*</span> <span class="mi">1</span> <span class="o">/</span> <span class="mf">200.0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">pan</span><span class="p">.</span><span class="n">state</span> <span class="o">==</span> <span class="n">UIGestureRecognizerStateEnded</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 反弹</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 弹簧效果的动画</span>
</span><span class='line'>        <span class="c1">// SpringWithDamping:弹性系数,越小，弹簧效果越明显</span>
</span><span class='line'>        <span class="p">[</span><span class="bp">UIView</span> <span class="nl">animateWithDuration</span><span class="p">:</span><span class="mf">0.6</span> <span class="nl">delay</span><span class="p">:</span><span class="mi">0</span> <span class="nl">usingSpringWithDamping</span><span class="p">:</span><span class="mf">0.2</span> <span class="nl">initialSpringVelocity</span><span class="p">:</span><span class="mi">10</span> <span class="nl">options</span><span class="p">:</span><span class="n">UIViewAnimationOptionCurveEaseInOut</span> <span class="nl">animations</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">_topView</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">transform</span> <span class="o">=</span> <span class="n">CATransform3DIdentity</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span> <span class="nl">completion</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="kt">BOOL</span> <span class="n">finished</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://xiaobenmao.github.io/images/%E6%8A%98%E5%8F%A0%E5%9B%BE%E7%89%87storyboard.png" alt="" /></p>

<h3>渐变层</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 设置渐变颜色,渐变层会显示从红,绿,黄,三色排布</span>
</span><span class='line'><span class="n">gradientL</span><span class="p">.</span><span class="n">colors</span> <span class="o">=</span> <span class="l">@[</span><span class="p">(</span><span class="kt">id</span><span class="p">)[</span><span class="bp">UIColor</span> <span class="n">redColor</span><span class="p">].</span><span class="bp">CGColor</span><span class="p">,(</span><span class="kt">id</span><span class="p">)[</span><span class="bp">UIColor</span> <span class="n">greenColor</span><span class="p">].</span><span class="bp">CGColor</span><span class="p">,(</span><span class="kt">id</span><span class="p">)[</span><span class="bp">UIColor</span> <span class="n">yellowColor</span><span class="p">].</span><span class="bp">CGColor</span><span class="l">]</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 设置渐变定位点</span>
</span><span class='line'><span class="c1">//gradientL.locations = @[@0.1,@0.4,@0.5];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 设置渐变开始点，取值0~1</span>
</span><span class='line'><span class="n">gradientL</span><span class="p">.</span><span class="n">startPoint</span> <span class="o">=</span> <span class="n">CGPointMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">_bottomView</span><span class="p">.</span><span class="n">layer</span> <span class="nl">addSublayer</span><span class="p">:</span><span class="n">gradientL</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://xiaobenmao.github.io/images/%E6%8A%98%E5%8F%A0%E5%9B%BE%E7%89%87%E6%B8%90%E5%8F%98%E5%B1%821.png" alt="" /></p>

<p><img src="http://xiaobenmao.github.io/images/%E6%8A%98%E5%8F%A0%E5%9B%BE%E7%89%87%E6%B8%90%E5%8F%98%E5%B1%822.png" alt="" /></p>

<p><img src="http://xiaobenmao.github.io/images/%E6%8A%98%E5%8F%A0%E5%9B%BE%E7%89%87%E6%B8%90%E5%8F%98%E5%B1%823.png" alt="" /></p>

<ul>
<li>注意点:

<ul>
<li>`在storyboard排列imageView时,注意前后顺序,否则会在选装超过90°时被挡住</li>
<li>必须设置渐变层的渐变色,然后通过透明度控制显示和隐藏</li>
<li>在设置M34增加立体感时,

<ul>
<li>要创建一个空的CATransform3D</li>
<li>然后添加M34(可通过参数设置很小,验证有没有效果,向外为负数)</li>
<li>如果有旋转,则将transform作为上一次的旋转参数,赋值给要旋转的layer</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">CATransform3D</span> <span class="n">transfrom</span> <span class="o">=</span> <span class="n">CATransform3DIdentity</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// m34增加旋转的立体感，近大远小,d：距离图层的距离</span>
</span><span class='line'><span class="n">transfrom</span><span class="p">.</span><span class="n">m34</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">/</span> <span class="mf">10.0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">transfrom</span> <span class="o">=</span> <span class="n">CATransform3DRotate</span><span class="p">(</span><span class="n">transfrom</span><span class="p">,</span> <span class="n">angle</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">_topView</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">transform</span> <span class="o">=</span> <span class="n">transfrom</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 设置阴影效果</span>
</span><span class='line'><span class="n">_gradientL</span><span class="p">.</span><span class="n">opacity</span> <span class="o">=</span> <span class="n">transP</span><span class="p">.</span><span class="n">y</span> <span class="o">*</span> <span class="mi">1</span> <span class="o">/</span> <span class="mf">200.0</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://xiaobenmao.github.io/images/%E6%8A%98%E5%8F%A0%E5%9B%BE%E7%89%87%E7%AB%8B%E4%BD%93%E6%95%88%E6%9E%9C.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CoreAnimation-CABasicAnimation和CAKeyframeAnimation和CAGroupAnimation]]></title>
    <link href="http://xiaobenmao.github.io/blog/2014/08/04/coreanimation-cabasicanimationhe-cakeyframeanimationhe-cagroupanimation/"/>
    <updated>2014-08-04T15:31:00+08:00</updated>
    <id>http://xiaobenmao.github.io/blog/2014/08/04/coreanimation-cabasicanimationhe-cakeyframeanimationhe-cagroupanimation</id>
    <content type="html"><![CDATA[<h3>CABasicAnimation</h3>

<!--more-->


<p><img src="http://xiaobenmao.github.io/images/CABasicAnimation.png" alt="" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">touchesBegan:</span><span class="p">(</span><span class="bp">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="nv">touches</span> <span class="nf">withEvent:</span><span class="p">(</span><span class="bp">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="nv">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 创建动画</span>
</span><span class='line'>    <span class="bp">CABasicAnimation</span> <span class="o">*</span><span class="n">anim</span> <span class="o">=</span> <span class="p">[</span><span class="bp">CABasicAnimation</span> <span class="n">animation</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 描述下修改哪个属性产生动画</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 只能是layer属性</span>
</span><span class='line'>    <span class="n">anim</span><span class="p">.</span><span class="n">keyPath</span> <span class="o">=</span> <span class="s">@&quot;transform.scale&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">anim</span><span class="p">.</span><span class="n">toValue</span> <span class="o">=</span> <span class="mf">@0.5</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 要想动画执行完成后保持最后状态,以下两个条件缺一不可</span>
</span><span class='line'>    <span class="c1">// 设置动画完成的时候不要移除动画</span>
</span><span class='line'>    <span class="n">anim</span><span class="p">.</span><span class="n">removedOnCompletion</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 设置动画执行完成要保持动画最后的状态</span>
</span><span class='line'>    <span class="n">anim</span><span class="p">.</span><span class="n">fillMode</span> <span class="o">=</span> <span class="n">kCAFillModeForwards</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 设置动画执行次数</span>
</span><span class='line'>    <span class="n">anim</span><span class="p">.</span><span class="n">repeatCount</span> <span class="o">=</span> <span class="n">MAXFLOAT</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// imageView上的图片是心形,将动画加在imageView的层上</span>
</span><span class='line'>    <span class="p">[</span><span class="n">_imageV</span><span class="p">.</span><span class="n">layer</span> <span class="nl">addAnimation</span><span class="p">:</span><span class="n">anim</span> <span class="nl">forKey</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>如果保持最后状态:

<ul>
<li>当改变imagView的大小后,保持在最后的状态</li>
<li>然后重复进行,</li>
</ul>
</li>
<li>如果不添加保持最后状态的代码

<ul>
<li>当改变imageView的大小后,先恢复到原始状态</li>
<li>然后重复进行</li>
</ul>
</li>
</ul>


<h3>CAKeyframeAnimation</h3>

<p><img src="http://xiaobenmao.github.io/images/CAKeyframeAnimation.png" alt="" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>   <span class="cm">/*</span>
</span><span class='line'><span class="cm">    * 创建CALayer</span>
</span><span class='line'><span class="cm">    * touchBegin,点击屏幕，做动画</span>
</span><span class='line'><span class="cm">    * 创建动画，添加动画到CALayer</span>
</span><span class='line'><span class="cm">    * 怎样执行动画？执行动画的本质是改变图层的属性。</span>
</span><span class='line'><span class="cm">    * 告诉动画执行怎样的动画?设置动画属性(position)</span>
</span><span class='line'><span class="cm">    * 告诉动画属性怎么改变?设置动画属性值改变 toValue fromValue</span>
</span><span class='line'><span class="cm">    * duration:动画时长</span>
</span><span class='line'><span class="cm">    * 动画有反弹?取消反弹</span>
</span><span class='line'><span class="cm">        1&gt; 执行动画完毕不要移除</span>
</span><span class='line'><span class="cm">        2&gt; 设置动画填充模式，保持最新的位置。</span>
</span><span class='line'><span class="cm">    * rotation:</span>
</span><span class='line'><span class="cm">    三维旋转：transform</span>
</span><span class='line'><span class="cm">    二维旋转：transform.rotation</span>
</span><span class='line'><span class="cm">    * scale</span>
</span><span class='line'><span class="cm">    * 设置图层内容（心）</span>
</span><span class='line'><span class="cm">    * tovalue:@0.5</span>
</span><span class='line'><span class="cm">    * 总结CABasicAnimation只能在两个值之间做动画，怎么多个值做动画，用CAKeyframeAnimation</span>
</span><span class='line'><span class="cm">    */</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;DrawView.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">DrawView</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">UIBezierPath</span> <span class="o">*</span><span class="n">path</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">DrawView</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">touchesBegan:</span><span class="p">(</span><span class="bp">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="nv">touches</span> <span class="nf">withEvent:</span><span class="p">(</span><span class="bp">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="nv">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// touch</span>
</span><span class='line'>    <span class="bp">UITouch</span> <span class="o">*</span><span class="n">touch</span> <span class="o">=</span> <span class="p">[</span><span class="n">touches</span> <span class="n">anyObject</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 获取手指的触摸点</span>
</span><span class='line'>    <span class="bp">CGPoint</span> <span class="n">curP</span> <span class="o">=</span> <span class="p">[</span><span class="n">touch</span> <span class="nl">locationInView</span><span class="p">:</span><span class="nb">self</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 创建路径</span>
</span><span class='line'>    <span class="bp">UIBezierPath</span> <span class="o">*</span><span class="n">path</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIBezierPath</span> <span class="n">bezierPath</span><span class="p">];</span>
</span><span class='line'>    <span class="n">_path</span> <span class="o">=</span> <span class="n">path</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 设置起点</span>
</span><span class='line'>    <span class="p">[</span><span class="n">path</span> <span class="nl">moveToPoint</span><span class="p">:</span><span class="n">curP</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">touchesMoved:</span><span class="p">(</span><span class="bp">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="nv">touches</span> <span class="nf">withEvent:</span><span class="p">(</span><span class="bp">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="nv">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// touch</span>
</span><span class='line'>    <span class="bp">UITouch</span> <span class="o">*</span><span class="n">touch</span> <span class="o">=</span> <span class="p">[</span><span class="n">touches</span> <span class="n">anyObject</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 获取手指的触摸点</span>
</span><span class='line'>    <span class="bp">CGPoint</span> <span class="n">curP</span> <span class="o">=</span> <span class="p">[</span><span class="n">touch</span> <span class="nl">locationInView</span><span class="p">:</span><span class="nb">self</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// 不设置起点,默认起点是上一位置的终点</span>
</span><span class='line'>    <span class="p">[</span><span class="n">_path</span> <span class="nl">addLineToPoint</span><span class="p">:</span><span class="n">curP</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// 进行重绘</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="n">setNeedsDisplay</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">touchesEnded:</span><span class="p">(</span><span class="bp">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="nv">touches</span> <span class="nf">withEvent:</span><span class="p">(</span><span class="bp">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="nv">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 给imageView添加核心动画</span>
</span><span class='line'>    <span class="c1">// 添加核心动画</span>
</span><span class='line'>    <span class="bp">CAKeyframeAnimation</span> <span class="o">*</span><span class="n">anim</span> <span class="o">=</span> <span class="p">[</span><span class="bp">CAKeyframeAnimation</span> <span class="n">animation</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">anim</span><span class="p">.</span><span class="n">keyPath</span> <span class="o">=</span> <span class="s">@&quot;position&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 路径转换,从UI转为CG</span>
</span><span class='line'>    <span class="n">anim</span><span class="p">.</span><span class="n">path</span> <span class="o">=</span> <span class="n">_path</span><span class="p">.</span><span class="bp">CGPath</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// 动画的时间</span>
</span><span class='line'>    <span class="n">anim</span><span class="p">.</span><span class="n">duration</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// 执行最大次数,也就是重复执行</span>
</span><span class='line'>    <span class="n">anim</span><span class="p">.</span><span class="n">repeatCount</span> <span class="o">=</span> <span class="n">MAXFLOAT</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// 取到imageView添加动画</span>
</span><span class='line'>    <span class="p">[[[</span><span class="nb">self</span><span class="p">.</span><span class="n">subviews</span> <span class="n">firstObject</span><span class="p">]</span> <span class="n">layer</span><span class="p">]</span> <span class="nl">addAnimation</span><span class="p">:</span><span class="n">anim</span> <span class="nl">forKey</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">drawRect:</span><span class="p">(</span><span class="bp">CGRect</span><span class="p">)</span><span class="nv">rect</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 绘制路径</span>
</span><span class='line'>    <span class="p">[</span><span class="n">_path</span> <span class="n">stroke</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://xiaobenmao.github.io/images/CAKeyframeAnimation%E7%9A%84path.png" alt="" /></p>

<p><img src="http://xiaobenmao.github.io/images/CAKeyframeAnimation%E7%9A%84storyboard.png" alt="" /></p>

<h4>图标抖动</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//    anim.values = @[@(angle2Radion(-10)),@(angle2Radion(10)),@(angle2Radion(-10))];</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://xiaobenmao.github.io/images/CAAnimationGroup.png" alt="" /></p>

<h3>CAGroupAnimation</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">touchesBegan:</span><span class="p">(</span><span class="bp">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="nv">touches</span> <span class="nf">withEvent:</span><span class="p">(</span><span class="bp">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="nv">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 同时缩放，平移，旋转</span>
</span><span class='line'>    <span class="bp">CAAnimationGroup</span> <span class="o">*</span><span class="n">group</span> <span class="o">=</span> <span class="p">[</span><span class="bp">CAAnimationGroup</span> <span class="n">animation</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">CABasicAnimation</span> <span class="o">*</span><span class="n">scale</span> <span class="o">=</span> <span class="p">[</span><span class="bp">CABasicAnimation</span> <span class="n">animation</span><span class="p">];</span>
</span><span class='line'>    <span class="n">scale</span><span class="p">.</span><span class="n">keyPath</span> <span class="o">=</span> <span class="s">@&quot;transform.scale&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">scale</span><span class="p">.</span><span class="n">toValue</span> <span class="o">=</span> <span class="mf">@0.5</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">CABasicAnimation</span> <span class="o">*</span><span class="n">rotation</span> <span class="o">=</span> <span class="p">[</span><span class="bp">CABasicAnimation</span> <span class="n">animation</span><span class="p">];</span>
</span><span class='line'>    <span class="n">rotation</span><span class="p">.</span><span class="n">keyPath</span> <span class="o">=</span> <span class="s">@&quot;transform.rotation&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">rotation</span><span class="p">.</span><span class="n">toValue</span> <span class="o">=</span> <span class="l">@(</span><span class="n">arc4random_uniform</span><span class="p">(</span><span class="n">M_PI</span><span class="p">)</span><span class="l">)</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">CABasicAnimation</span> <span class="o">*</span><span class="n">position</span> <span class="o">=</span> <span class="p">[</span><span class="bp">CABasicAnimation</span> <span class="n">animation</span><span class="p">];</span>
</span><span class='line'>    <span class="n">position</span><span class="p">.</span><span class="n">keyPath</span> <span class="o">=</span> <span class="s">@&quot;position&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">position</span><span class="p">.</span><span class="n">toValue</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSValue</span> <span class="nl">valueWithCGPoint</span><span class="p">:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="n">arc4random_uniform</span><span class="p">(</span><span class="mi">200</span><span class="p">),</span> <span class="n">arc4random_uniform</span><span class="p">(</span><span class="mi">200</span><span class="p">))];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">group</span><span class="p">.</span><span class="n">animations</span> <span class="o">=</span> <span class="l">@[</span><span class="n">scale</span><span class="p">,</span><span class="n">rotation</span><span class="p">,</span><span class="n">position</span><span class="l">]</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">_redView</span><span class="p">.</span><span class="n">layer</span> <span class="nl">addAnimation</span><span class="p">:</span><span class="n">group</span> <span class="nl">forKey</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
