<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Quartz2d | My World]]></title>
  <link href="http://xiaobenmao.github.io/blog/categories/quartz2d/atom.xml" rel="self"/>
  <link href="http://xiaobenmao.github.io/"/>
  <updated>2015-09-07T23:30:26+08:00</updated>
  <id>http://xiaobenmao.github.io/</id>
  <author>
    <name><![CDATA[嗷大喵]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Quartz2d-绘图中的定时器(CADisplayLink和NSTimer)]]></title>
    <link href="http://xiaobenmao.github.io/blog/2015/09/02/quartz2d-hui-tu-zhong-de-ding-shi-qi-cadisplaylinkhe-nstimer/"/>
    <updated>2015-09-02T18:32:01+08:00</updated>
    <id>http://xiaobenmao.github.io/blog/2015/09/02/quartz2d-hui-tu-zhong-de-ding-shi-qi-cadisplaylinkhe-nstimer</id>
    <content type="html"><![CDATA[<!--more-->


<p><img src="images/Quartz2d%E7%9A%84%E5%AE%9A%E6%97%B6%E5%99%A8.png" alt="" /></p>

<ul>
<li>NSSTimer</li>
</ul>


<pre><code class="objc">    /**
     *(NSTimeInterval)ti:多少秒调用一次,单位秒
     *(id)aTarget:给谁添加定时器
     *(SEL)aSelector:回调函数,每次调用所要做的事情
     *(id)userInfo:此参数可以为nil，当定时器失效时，由你指定的对象保留和释放该定时器。
     *(BOOL)yesOrNo:是否循环
     */
    + (NSTimer *)scheduledTimerWithTimeInterval:(NSTimeInterval)ti target:(id)aTarget selector:(SEL)aSelector userInfo:(id)userInfo repeats:(BOOL)yesOrNo;
    //启动 Timer
    – fire
    //停止 Timer
    – invalidate
</code></pre>

<ul>
<li><p>NSTimer初始化器接受调用方法逻辑之间的间隔作为它的其中一个参数，预设一秒执行30次。CADisplayLink默认每秒运行60次，通过它的frameInterval属性改变每秒运行帧数，如设置为2，意味CADisplayLink每隔一帧运行一次，有效的逻辑每秒运行30次。</p></li>
<li><p>NSTimer接受另一个参数是否重复，而把CADisplayLink设置为重复（默认重复？）直到它失效。</p></li>
<li><p>还有一个区别在于，NSTimer一旦初始化它就开始运行，而CADisplayLink需要将显示链接添加到一个运行循环中，即用于处理系统事件的一个Cocoa Touch结构。</p></li>
<li><p>NSTimer 我们通常会用在背景计算，更新一些数值资料，而如果牵涉到画面的更新，动画过程的演变，我们通常会用CADisplayLink。</p></li>
<li><p>但是要使用CADisplayLink，需要加入QuartzCore.framework及#import &lt;QuartzCore/CADisplayLink.h></p></li>
<li><p>CADisplayLink在Quartz2d中的使用</p></li>
</ul>


<pre><code class="objc">
#import "DrawView.h"


static CGFloat _snowY = 0;
@implementation DrawView

- (void)drawRect:(CGRect)rect {

    // 如果以后想绘制东西到view上面，必须在drawRect方法里面，不管有没有手动获取到上下文

    // 修改雪花y值
    UIImage *image =  [UIImage imageNamed:@"雪花"];

    // 画图
    [image drawAtPoint:CGPointMake(50, _snowY)];

    _snowY += 10;
    // 当掉出屏幕底部时,修改y值,重新在顶部画出来
    if (_snowY &gt; rect.size.height) {
        _snowY = 0;
    }

}

// 如果在绘图的时候需要用到定时器，通常

// NSTimer很少用于绘图，因为调度优先级比较低，并不会准时调用
- (void)awakeFromNib
{
    // 创建定时器
    //[NSTimer scheduledTimerWithTimeInterval:0.1 target:self selector:@selector(timeChange) userInfo:nil repeats:YES];
    CADisplayLink *link = [CADisplayLink displayLinkWithTarget:self selector:@selector(timeChange)];
    // 设定每隔几帧调用一次
    link.frameInterval = 30;
    // 添加主运行循环
    [link addToRunLoop:[NSRunLoop mainRunLoop] forMode:NSDefaultRunLoopMode];
}

// CADisplayLink:每次屏幕刷新的时候就会调用，屏幕一般一秒刷新60次


- (void)timeChange
{
    // 注意：这个方法并不会马上调用drawRect,其实这个方法只是给当前控件添加刷新的标记，等下一次屏幕刷新的时候才会调用drawRect
    [self setNeedsDisplay];
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quartz2d-画板]]></title>
    <link href="http://xiaobenmao.github.io/blog/2014/07/17/quartz2d-hua-ban/"/>
    <updated>2014-07-17T18:39:13+08:00</updated>
    <id>http://xiaobenmao.github.io/blog/2014/07/17/quartz2d-hua-ban</id>
    <content type="html"><![CDATA[<!--more-->


<pre><code class="objc">/**
5&gt; 画板
    演示程序：
    分析控件：ToolBar(不需要管里面子控件的frame)，画板view,自定义工具条（方便屏幕适配，能迅速固定里面子控件的位置）
    自动布局，四个约束确定一个控件
    蓝色按钮：左，右，下，高固定
    橘色按钮：右，下固定，宽度和高度和蓝色按钮相等。
    绿色按钮：右，下，宽度和高度和橘色按钮相等
    绘图思路：先描述路径，在渲染，需要画很多线条，最好每个线条保存到一个路径里面。
    绘图功能：
        * touchBegin设置画线起点：开始触摸的点
        * 怎么设置起点？创建UIBezierPath，贝塞尔路径才能设置起点
        * touchMove:手指移动到哪就画哪，addLine到移动的点
        * setNeedDisplay,路径描述完了，就渲染到视图就好了。
        * 只能画一条线？drawRect方法每次都会把之前的清掉，重新绘制
        * 怎么绘制多条路径？搞个数组保存上一次的
        * 设置线宽:每次滑动滑块，就改变下一次路径的宽度
        * 监听滑块的值，把值传递给paintView,设置路径的线宽。
        * 不能在drawRect写，会导致所有路径都是一个线宽，应该是每个路径都记录自己的线宽，而且线宽只需要设置一次，在路径一创建的时候就设置。
        * 设置颜色：
        * 自定义UIBezierPath，保存颜色，实现一条路径对应一个颜色
    辅助功能：
    * 清屏：清空所有路径数组
    * 撤销：移除最后一条路径
    * 橡皮擦:设置画笔为白色
    * 保存:
        1&gt; 把画板内容截屏
        2&gt; 把图片保存到相册 UIImageWriteToSavedPhotosAlbum
        3&gt; 保存相册的回调方法不能乱写，必须按照规定 image:didFinishSavingWithError:contextInfo:
    * 照片选择
        1&gt; 通常都是去相册里去照片
        2&gt; UIImagePickerController,就可以去手机相册了
        3&gt; 用Modal，没有导航控制器,不能push
        4&gt; 设置代理，获取图片
        5&gt; 把图片传递给paintView
        6&gt; 添加到路径，然后重绘。:画图片也需要顺序的
    * 照片处理
        1&gt; PPT画思路：搞一个和画板一样的透明view，里面搞个UIImageView来显示我们从照片库选择的图片，然后对UIImageView进行旋转，缩放等操作
        2&gt; UImageView不能放在layoutSubViews里面设置尺寸，因为要设置他的形变，默认会调用他父类的layoutSubViews,导致一些莫名其妙的原因
        3&gt; 在传图片的时候设置他的尺寸，和位置,让他和图片一样的尺寸，显示在中间
        4&gt; 长按操作：在长按结束的时候，做操作
            1.默认高亮状态，先变浅在恢复，设置alpha
            2.动画结束后，把自己截屏，传给控制器里，在交给paintView显示
            3.需要移除父视图，使命完成了，而且不移除，不能绘制东西，永远添加到paintView上面

*/
</code></pre>

<ul>
<li>当自定义类设置了接口,从外面传值,一定要重写setter方法</li>
<li>当绘制多条路径path的时候,为了每条路径的颜色不同,可以自定义贝瑟尔路径,继承自UIBezierPath保存每条路径的颜色,增加一个pathColor属性,在drawRect方法中,就可以设置每条路径的颜色,否则修改颜色后所有,颜色都是一样的</li>
<li>stroke时,必须放在最后,属性设置放在之前,比如颜色放在后面,第一根线的颜色是错误的</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quartz2d-手势解锁]]></title>
    <link href="http://xiaobenmao.github.io/blog/2014/07/17/quartz2d-shou-shi-jie-suo/"/>
    <updated>2014-07-17T11:39:07+08:00</updated>
    <id>http://xiaobenmao.github.io/blog/2014/07/17/quartz2d-shou-shi-jie-suo</id>
    <content type="html"><![CDATA[<!--more-->


<pre><code class="objc">/**
4&gt; 手势解锁
    * 演示实例程序
    * 分析界面有几个控件：背景：UIImageView 白色圆圈：按钮（点击他，会出现另外一种图片，按钮可以设置不同状态下的图片。）单独视图：(画线是有范围的，当超出view就不能画线了)
    * HMLoadView:自定义视图，在视图一创建的时候，就添加9个按钮。
    * 在initWithCoder，initWithFrame方法添加按钮。
    * 九宫格布局：
        tolcol = 3
        计算row,col 按钮的x，y跟col,row有关系，col = i % tolcol row = i / tolcol
        计算边距 margin = (view.bounds.size.width - tolcol * btnW) / (tolcol + 1)
        btnX = margin + (btnW + margin) * col
        btnY = (btnW + margin) * row
    * 圆的选中
      * 点击按钮就为选中的图片怎么做？监听按钮点击。
      * 不能addTarget: 不能及时显示选中图片。
      * 监听touchBegin,判断点在不在按钮的frame上。
      * touchBegin不调用？原因：事件交给按钮处理，应该把事件交给解锁视图。让按钮不接收事件。
      * 设置按钮不允许交互，2个用处：1.不接收事件 2.取消高亮效果 一举两得
    * 遍历所有按钮，看触摸点在哪个按钮上，就选中谁，CGRectContainsPoint 传入的参数必须是同一个坐标系
      * 实现touchMove方法：因为手指移动的时候，也需要判断点在不在按钮上。
      * 抽方法，因为touchMove的方法里，也需要做同样的事情。
            1&gt; pointWithTouches 根据touches集合取出触摸点
            2&gt; buttonWithPoint 根据触摸点，获取触摸按钮
   * 圆的连线
     * 哪些需要连线？被选中按钮之间都需要连线，还有一个多余的线
     * 先把选中的按钮全部连线？为什么，因为多余的那根线是从最后一个按钮的圆心开始画，手指移动在哪就画哪。
     * 搞个数组保存下所有选中按钮，在drawRect方法中遍历所有按钮，连线
     * UIBezierPath画线，不需要上下文。
     * 需要多少个UIBezierPath对象？一个，路径都是连续的，不相连的，才需要创建新的UIBezierPath。
     * 遍历数组，描述路径
        1&gt; 起点：第一个按钮的圆心
        2&gt; 添加一根线到其他按钮的圆心
     * 设置路径的颜色和线宽
     * 什么时候渲染？把所有路径都描述完就，渲染一次就够了。
     * [path stroke] 就能渲染到视图上了。
     * 画多余的那根线，记住手指移动的位置。
     * setNeedDisplay 没有画出来线?因为drawRect只会调用一次，需要每次手指移动的时候，都需要重绘。
     * touchBegin不调用setNeedDisplay?那时候重绘也没用，只有起点。
     * lineJoinStyle：有尖尖的东西，线段连接样式的问题，设置为平的。
     * 已经选中的按钮，不需要再次选中，和画线
     * 手指抬起，取消所有选中按钮，并且清空数组，清空线条
     * drawRect判断下没有选中数组，不需要画线。
     * 如何判断用户是否输入正确?给选中按钮绑定tag,遍历所有选中按钮，把tag拼接成一个字符串。

*/
</code></pre>

<ul>
<li>自定义View用来添加按钮</li>
</ul>


<pre><code class="objc">
#import "LockView.h"

@interface LockView ()

@end

@implementation LockView

// 加载完xib的时候调用
- (void)awakeFromNib
{


    // 创建9个按钮
    for ( int i = 0; i &lt; 9; i++) {
        UIButton *btn = [UIButton buttonWithType:UIButtonTypeCustom];

        // 不允许用户交互，按钮就不能点击，也就不能达到高亮状态
        btn.userInteractionEnabled = NO;

        [btn setImage:[UIImage imageNamed:@"gesture_node_normal"] forState:UIControlStateNormal];

        [btn setImage:[UIImage imageNamed:@"gesture_node_highlighted"] forState:UIControlStateSelected];

        btn.tag = i;

        [self addSubview:btn];
    }
}


// 为什么要在这个方法布局子控件，因为只要一调用这个方法，就表示父控件的尺寸确定
- (void)layoutSubviews
{
    [super layoutSubviews];

    NSUInteger count = self.subviews.count;
    int cols = 3;

    CGFloat x = 0;
    CGFloat y = 0;
    CGFloat w = 74;
    CGFloat h = 74;
    CGFloat margin = (self.bounds.size.width - cols * w) / (cols + 1);

    CGFloat col = 0;
    CGFloat row = 0;
    for (NSUInteger i = 0; i &lt; count; i++) {
        UIButton *btn = self.subviews[i];
        // 获取当前按钮的列数
        col = i % cols;
        row = i / cols;
        x = margin + col * (margin + w);
        y = row * (margin + w);

        btn.frame = CGRectMake(x, y, w, h);

    }

}
</code></pre>

<p><img src="/images/%E6%89%8B%E5%8A%BF%E8%A7%A3%E9%94%81-%E6%B7%BB%E5%8A%A0%E6%8C%89%E9%92%AE.png" alt="" /></p>

<ul>
<li><p>通过控件添加手势
<img src="/images/%E6%89%8B%E5%8A%BF%E8%A7%A3%E9%94%81-%E6%8E%A7%E4%BB%B6%E6%B7%BB%E5%8A%A0%E6%89%8B%E5%8A%BF.png" alt="" /></p></li>
<li><p>手指移动到按钮上使,选中按钮(取消按钮的高亮状态)</p></li>
</ul>


<pre><code class="objc">
- (IBAction)pan:(UIPanGestureRecognizer *)pan
{
    // 获取触摸点
    CGpoint curP = [pan locationInView:self];

    // 判断触摸点在不在按钮上
    for (UIButton *btn in self.subviews) {
        // 点在不在某个范围内
        if (CGRectContainsPoint(btn.frame, curP) ) {
            // 点在按钮上
            btn.selected = YES;
        }
    }
}
</code></pre>

<p><img src="/images/%E6%89%8B%E5%8A%BF%E8%A7%A3%E9%94%81-%E9%80%89%E4%B8%AD%E6%8C%89%E9%92%AE.png" alt="" /></p>

<ul>
<li>选中按钮之间连线

<ul>
<li>将选中按钮添加到可变数组中保存</li>
<li>每一次有选中的按钮就重绘画线</li>
</ul>
</li>
</ul>


<pre><code class="objc">@property (nonatomic, strong) NSMutableArray *selectedsBtn;
- (NSMutableArray *)selectedsBtn
{
    if (_selectedsBtn == nil) {
        _selectedsBtn = [NSMutableArray array];
    }

    return _selectedsBtn;
}


- (IBAction)pan:(UIPanGestureRecognizer *)pan
{
    // 获取触摸点
    _curP = [pan locationInView:self];

    // 判断触摸点在不在按钮上
    for (UIButton *btn in self.subviews) {
        // 点在不在某个范围内,并且按钮没有被选中
        if (CGRectContainsPoint(btn.frame, _curP) &amp;&amp; btn.selected == NO) {
            // 点在按钮上
            btn.selected = YES;

            // 保存到数组中
            [self.selectedsBtn addObject:btn];

            // 重绘
            [self setNeedsDisplay];
        }

    }
}


// 只要调用这个方法，就会把之前绘制的东西全部清掉，重新绘制
- (void)drawRect:(CGRect)rect
{
    // 没有选中按钮，不需要连线
    if (self.selectedsBtn.count == 0) return;

    // 把所有选中按钮中心点连线
    UIBezierPath *path = [UIBezierPath bezierPath];


    NSUInteger count = self.selectedsBtn.count;
    // 把所有选中按钮之间都连好线
    for (int i = 0; i &lt; count; i++) {
        UIButton *btn = self.selectedsBtn[i];
        if (i == 0) {
            // 设置起点
            [path moveToPoint:btn.center];
        }else{
            [path addLineToPoint:btn.center];
        }

    }

    [[UIColor greenColor] set];
    path.lineWidth = 10;
    path.lineJoinStyle = kCGLineJoinRound;
    [path stroke];

}
</code></pre>

<ul>
<li>连线到触摸点</li>
<li>当手指抬起时,清空数组重绘,<code>系统默认手势抬起时会重绘</code></li>
</ul>


<pre><code class="objc">#import "LockView.h"

@interface LockView ()

@property (nonatomic, strong) NSMutableArray *selectedsBtn;

@property (nonatomic, assign) CGPoint curP;

@end

@implementation LockView

- (NSMutableArray *)selectedsBtn
{
    if (_selectedsBtn == nil) {
        _selectedsBtn = [NSMutableArray array];
    }

    return _selectedsBtn;
}

- (IBAction)pan:(UIPanGestureRecognizer *)pan
{
    // 获取触摸点
    _curP = [pan locationInView:self];

    // 判断触摸点在不在按钮上
    for (UIButton *btn in self.subviews) {
        // 点在不在某个范围内,并且按钮没有被选中
        if (CGRectContainsPoint(btn.frame, _curP) &amp;&amp; btn.selected == NO) {
            // 点在按钮上
            btn.selected = YES;

            // 保存到数组中
            [self.selectedsBtn addObject:btn];

        }

    }

    // 重绘
    [self setNeedsDisplay];


    if (pan.state == UIGestureRecognizerStateEnded) {

        // 创建可变字符串
        NSMutableString *strM = [NSMutableString string];
         // 保存输入密码
        for (UIButton *btn in self.selectedsBtn) {

            [strM appendFormat:@"%ld",btn.tag];

        }
        NSLog(@"%@",strM);

        // 还原界面

        // 取消所有按钮的选中
        [self.selectedsBtn makeObjectsPerformSelector:@selector(setSelected:) withObject:@(NO)];

        // 清除画线,把选中按钮清空
        [self.selectedsBtn removeAllObjects];
    }

}
// 加载完xib的时候调用
- (void)awakeFromNib
{


    // 创建9个按钮
    for ( int i = 0; i &lt; 9; i++) {
        UIButton *btn = [UIButton buttonWithType:UIButtonTypeCustom];

        // 不允许用户交互，按钮就不能点击，也就不能达到高亮状态
        btn.userInteractionEnabled = NO;

        [btn setImage:[UIImage imageNamed:@"gesture_node_normal"] forState:UIControlStateNormal];

        [btn setImage:[UIImage imageNamed:@"gesture_node_highlighted"] forState:UIControlStateSelected];

        btn.tag = i;

        [self addSubview:btn];
    }
}


// 为什么要在这个方法布局子控件，因为只要一调用这个方法，就表示父控件的尺寸确定

- (void)layoutSubviews
{
    [super layoutSubviews];

    NSUInteger count = self.subviews.count;
    int cols = 3;

    CGFloat x = 0;
    CGFloat y = 0;
    CGFloat w = 74;
    CGFloat h = 74;
    CGFloat margin = (self.bounds.size.width - cols * w) / (cols + 1);

    CGFloat col = 0;
    CGFloat row = 0;
    for (NSUInteger i = 0; i &lt; count; i++) {
        UIButton *btn = self.subviews[i];
        // 获取当前按钮的列数
        col = i % cols;
        row = i / cols;
        x = margin + col * (margin + w);
        y = row * (margin + w);

        btn.frame = CGRectMake(x, y, w, h);

    }

}

// 只要调用这个方法，就会把之前绘制的东西全部清掉，重新绘制
- (void)drawRect:(CGRect)rect
{
    // 没有选中按钮，不需要连线
    if (self.selectedsBtn.count == 0) return;

    // 把所有选中按钮中心点连线
    UIBezierPath *path = [UIBezierPath bezierPath];


    NSUInteger count = self.selectedsBtn.count;
    // 把所有选中按钮之间都连好线
    for (int i = 0; i &lt; count; i++) {
        UIButton *btn = self.selectedsBtn[i];
        if (i == 0) {
            // 设置起点
            [path moveToPoint:btn.center];
        }else{
            [path addLineToPoint:btn.center];
        }

    }

    // 连线到手指的触摸点
    [path addLineToPoint:_curP];


    [[UIColor greenColor] set];
    path.lineWidth = 10;
    path.lineJoinStyle = kCGLineJoinRound;
    [path stroke];

}

@end
</code></pre>

<p><img src="/images/%E6%89%8B%E5%8A%BF%E8%A7%A3%E9%94%81-%E8%A7%A3%E9%94%81" alt="" /></p>

<ul>
<li>判断是连线否正确

<ul>
<li>在添加按钮时,添加tag值,在手势抬起状态,判断选中按钮数组里的拼接的tag值和保存的是否相同</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quartz2d-手动截屏]]></title>
    <link href="http://xiaobenmao.github.io/blog/2014/07/16/quartz2d-shou-dong-jie-ping/"/>
    <updated>2014-07-16T15:39:00+08:00</updated>
    <id>http://xiaobenmao.github.io/blog/2014/07/16/quartz2d-shou-dong-jie-ping</id>
    <content type="html"><![CDATA[<!--more-->


<p><img src="/images/%E6%89%8B%E5%8A%A8%E6%88%AA%E5%B1%8F.png" alt="" />
<img src="/images/%E6%89%8B%E5%8A%A8%E6%88%AA%E5%B1%8F1.png" alt="" /></p>

<h3>图片截取</h3>

<ul>
<li>1,先用addClip根据path截取所要显示的区域</li>
<li>2,然后将旧的即原来的所要截取的控件渲染到上下文

<ul>
<li>如果是图片和文字直接draw</li>
<li>如果是控件,比如imageView等的层要用renderInContex渲染</li>
</ul>
</li>
<li>3,先有了要截取的区域(1,),再添加控件(2,),然后根据上下文获取一张新的图片</li>
<li>上下文跟原来控件大小相同</li>
<li>上一笔记,图片剪裁(带有边框头像):有了剪裁区域后,直接draw的图片</li>
<li>上一笔记,截屏(指定控件):没有剪裁区域,直接将控件本身层渲染到上下文</li>
</ul>


<pre><code class="objc">#import "ViewController.h"

@interface ViewController ()

@property (nonatomic, assign) CGPoint startP;

@property (weak, nonatomic) IBOutlet UIImageView *imageV;
@property (nonatomic, weak) UIView *clipView;



@end

@implementation ViewController

- (UIView *)clipView{
    if (_clipView == nil) {
        UIView *view = [[UIView alloc] init];
        _clipView = view;

        view.backgroundColor = [UIColor blackColor];
        view.alpha = 0.5;

        [self.view addSubview:view];
    }

    return _clipView;
}

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view, typically from a nib.

    // 给控制器的view添加一个pan手势
    UIPanGestureRecognizer *pan = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(pan:)];

    [self.view addGestureRecognizer:pan];
}

- (void)pan:(UIPanGestureRecognizer *)pan
{
    CGPoint endA = CGPointZero;

    if (pan.state == UIGestureRecognizerStateBegan) { // 一开始拖动的时候

        // 获取一开始触摸点
      _startP = [pan locationInView:self.view];

    }else if(pan.state == UIGestureRecognizerStateChanged){ // 一直拖动
        // 获取结束点
         endA = [pan locationInView:self.view];

        CGFloat w = endA.x - _startP.x;
        CGFloat h = endA.y - _startP.y;

        // 获取截取范围
        CGRect clipRect = CGRectMake(_startP.x, _startP.y, w, h);


        // 生成截屏的view
        self.clipView.frame = clipRect;



    }else if (pan.state == UIGestureRecognizerStateEnded){


        // 图片裁剪，生成一张新的图片

        // 开启上下文
        // 如果不透明，默认超出裁剪区域会变成黑色，通常都是透明
        UIGraphicsBeginImageContextWithOptions(_imageV.bounds.size, NO, 0);

        // 设置裁剪区域
       UIBezierPath *path =  [UIBezierPath bezierPathWithRect:_clipView.frame];

        [path addClip];

        // 获取上下文
        CGContextRef ctx = UIGraphicsGetCurrentContext();

        // 把控件上的内容渲染到上下文
        [_imageV.layer renderInContext:ctx];

        // 生成一张新的图片
        _imageV.image = UIGraphicsGetImageFromCurrentImageContext();

        // 关闭上下文
        UIGraphicsEndImageContext();

        // 先移除
        [_clipView removeFromSuperview];
        // 截取的view设置为nil
        _clipView = nil;

    }
}
@end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quartz2d-图片擦除(给妹子脱衣服)]]></title>
    <link href="http://xiaobenmao.github.io/blog/2014/07/16/quartz2d-tu-pian-ca-chu-gei-mei-zi-tuo-yi-fu/"/>
    <updated>2014-07-16T11:38:52+08:00</updated>
    <id>http://xiaobenmao.github.io/blog/2014/07/16/quartz2d-tu-pian-ca-chu-gei-mei-zi-tuo-yi-fu</id>
    <content type="html"><![CDATA[<ul>
<li>图片擦除是将两张相似的图片重叠,当擦除上面图片的指定区域,显示下面相同区域所要的看到的图片效果</li>
</ul>


<!--more-->


<p><img src="/images/%E5%9B%BE%E7%89%871.png" alt="" /></p>

<p><img src="/images/%E5%9B%BE%E7%89%872.png" alt="" /></p>

<ul>
<li>核心代码

<ul>
<li>渲染图片:[_imageView.layer renderInContext:ctx];</li>
<li>擦除上层图片:CGContextClearRect(ctx, rect);</li>
</ul>
</li>
</ul>


<p><img src="/images/%E6%93%A6%E9%99%A4%E5%89%8D.png" alt="" /></p>

<p><img src="/images/%E6%93%A6%E9%99%A4%E5%90%8E.png" alt="" /></p>

<pre><code class="objc">#import "ViewController.h"

@interface ViewController ()
@property (weak, nonatomic) IBOutlet UIImageView *imageView;

@end

@implementation ViewController

- (void)viewDidLoad {
    [super viewDidLoad];

    // 添加手势
    UIPanGestureRecognizer *pan = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(pan:)];

    [self.view addGestureRecognizer:pan];
}


- (void)pan:(UIPanGestureRecognizer *)pan
{
    // 获取当前点
    CGPoint curP = [pan locationInView:self.view];

    // 获取擦除的矩形范围
    CGFloat wh = 100;
    CGFloat x = curP.x - wh * 0.5;
    CGFloat y = curP.y - wh * 0.5;

    CGRect rect = CGRectMake(x, y, wh, wh);

    // 开启上下文
    UIGraphicsBeginImageContextWithOptions(self.view.bounds.size, NO, 0);

    CGContextRef ctx = UIGraphicsGetCurrentContext();

    // 控件的layer渲染上去
    [_imageView.layer renderInContext:ctx];

    // 擦除图片
    CGContextClearRect(ctx, rect);

    // 生成一张图片
    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();

    _imageView.image = image;

    // 关闭上下文
    UIGraphicsEndImageContext();


}
@end
</code></pre>

<p><img src="/images/%E5%9B%BE%E7%89%87%E6%93%A6%E9%99%A4storyboard.png" alt="" /></p>
]]></content>
  </entry>
  
</feed>
