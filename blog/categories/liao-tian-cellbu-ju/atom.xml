<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 聊天cell布局 | My World]]></title>
  <link href="http://xiaobenmao.github.io/blog/categories/liao-tian-cellbu-ju/atom.xml" rel="self"/>
  <link href="http://xiaobenmao.github.io/"/>
  <updated>2015-09-10T18:39:31+08:00</updated>
  <id>http://xiaobenmao.github.io/</id>
  <author>
    <name><![CDATA[嗷大喵]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[聊天cell布局-控件常用形变transform属性方法(旋转]]></title>
    <link href="http://xiaobenmao.github.io/blog/2014/04/16/liao-tian-cellbu-ju-kong-jian-chang-yong-xing-bian-transformshu-xing-fang-fa-xuan-zhuan/"/>
    <updated>2014-04-16T19:59:58+08:00</updated>
    <id>http://xiaobenmao.github.io/blog/2014/04/16/liao-tian-cellbu-ju-kong-jian-chang-yong-xing-bian-transformshu-xing-fang-fa-xuan-zhuan</id>
    <content type="html"><![CDATA[<h2>transform常用属性方法</h2>

<ul>
<li>带make的每次设置都是相对于初始transform状态,</li>
<li>不带make的每次设置都是相对于当前transform状态</li>
<li>平移,缩放,旋转</li>
</ul>


<!--more-->


<pre><code>
/*
 *平移
 *两个参数分别为X和Y方向上的位移
 */
self. tempView.transform = CGAffineTransformMakeTranslation(100, 100);

/*
 *缩放
 *两个参数分别为X和Y方向上的缩放值
 */
self.tempView.transform = CGAffineTransformMakeScale(2, 0.5);

/*
 *旋转
 *参数为弧度值,弧度 = 角度 * (π / 180);
 */
self.tempView.transform = CGAffineTransformMakeRotation(M_PI_4);
</code></pre>

<ul>
<li>平移,缩放,旋转的组合</li>
</ul>


<pre><code class="objc">CGAffineTransform CGAffineTransformTranslate(&lt;#CGAffineTransform t#&gt;, &lt;#CGFloat tx#&gt;, &lt;#CGFloat ty#&gt;)
CGAffineTransform CGAffineTransformRotate(&lt;#CGAffineTransform t#&gt;, &lt;#CGFloat angle#&gt;)
CGAffineTransform CGAffineTransformScale(&lt;#CGAffineTransform t#&gt;, &lt;#CGFloat sx#&gt;, &lt;#CGFloat sy#&gt;)

[UIView animateWithDuration:2 animations:^{
    // 同时移动,缩放,旋转
    CGAffineTransform move = CGAffineTransformMakeTranslation(100, 100);
    CGAffineTransform rot_move = CGAffineTransformRotate(move, M_PI_2);
    CGAffineTransform scal_rot_move = CGAffineTransformScale(rot_move, 2, 2);
    self.tempView.transform  = scal_rot_move;

}];

// 累加旋转,取得当前的transform.再旋转π/4
self.tempView.transform = CGAffineTransformRotate(self.tempView.transform, M_PI_4);
</code></pre>

<ul>
<li>transform清零

<ul>
<li>作用在控件上的平移,缩放,旋转或者各种组合都会消失,恢复原来状态
<code>objc
self.tempView.transform = CGAffineTransformIdentity;
</code></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[聊天cell布局-键盘弹出和退出处理]]></title>
    <link href="http://xiaobenmao.github.io/blog/2014/04/15/liao-tian-cellbu-ju-jian-pan-dan-chu-he-tui-chu-chu-li/"/>
    <updated>2014-04-15T19:52:36+08:00</updated>
    <id>http://xiaobenmao.github.io/blog/2014/04/15/liao-tian-cellbu-ju-jian-pan-dan-chu-he-tui-chu-chu-li</id>
    <content type="html"><![CDATA[<h2>聊天布局-键盘弹出和隐藏处理(方法一)</h2>

<ul>
<li>当键盘弹出时,工具条和tableView应该整体往上移,所以tableView不应该有顶部约束,否则将会被压缩.

<ul>
<li>将tableView的顶部约束删除(如果有)</li>
<li>将tableView和父控件view连线,约束选择equalHeight</li>
<li>点击约束修改为tableView.height = superView.heitht - 44(工具条的高度)</li>
</ul>
</li>
</ul>


<!--more-->


<p><img src="/images/tableView%E7%9A%84%E9%AB%98%E5%BA%A6%E7%BA%A6%E6%9D%9F.png" alt="tableView的高度约束" /></p>

<ul>
<li>当键盘弹出时,修改工具条和父控件之间的底部约束

<ul>
<li>当工具条的底部约束增大(减小)时,工具条和tableView会整体往上(往下)移动</li>
<li>将该约束连线到控制器中,可以取到修改</li>
</ul>
</li>
</ul>


<p><img src="/images/%E5%BA%95%E9%83%A8%E7%BA%A6%E6%9D%9F%E8%BF%9E%E7%BA%BF.png" alt="底部约束连线" />
- 监听键盘弹出和退出通知
    - 键盘退出的时机设定为滚动tableView的时候</p>

<p><img src="/images/%E7%9B%91%E5%90%AC%E5%88%B0%E7%9A%84%E9%94%AE%E7%9B%98%E9%80%9A%E7%9F%A5%E4%BF%A1%E6%81%AF.png" alt="监听到的键盘通知信息" /></p>

<pre><code class="objc">- (void)viewDidLoad {

    // 监听键盘通知
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyBoardWillSHow:) name:UIKeyboardWillShowNotification object:nil];

    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyBoardWillHide:) name:UIKeyboardWillHideNotification object:nil];
}
// 必须要移除监听
- (void)dealloc
{
    [[NSNotificationCenter defaultCenter] removeObserver:self];
}

#pragma mark - 键盘处理

- (void)keyBoardWillSHow:(NSNotification *)note
{
    NSLog(@"keyBoardWillSHow,%@",note);
    // 取得键盘弹出的时间
    CGFloat duration = [note.userInfo[UIKeyboardAnimationDurationUserInfoKey] floatValue];
    // 取得键盘的高度,也就是底部约束上移的距离
    CGFloat change = [note.userInfo[UIKeyboardFrameBeginUserInfoKey] CGRectValue].size.height;
    // 修改约束
    self.toolbarToView_Constraint.constant = change;
    // 增加动画,强制更新布局
    [UIView animateWithDuration:duration animations:^{
        [self.view layoutIfNeeded];
    }];
}

- (void)keyBoardWillHide:(NSNotification *)note
{
    NSLog(@"keyBoardWillHide,%@",note);
    // 取得键盘退出的时间
    CGFloat duration = [note.userInfo[UIKeyboardAnimationDurationUserInfoKey] floatValue];
    // 键盘退出,工具条和tableView移回原处
    self.toolbarToView_Constraint.constant = 0;
    // 增加动画,强制更新
    [UIView animateWithDuration:duration animations:^{
        [self.view layoutIfNeeded];
    }];

}

- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView
{
    // 隐藏键盘:
    //[self.messageFiled resignFirstResponder];// 调用者必须为调用键盘的控件对象
    //[self.messageFiled endEditing:YES];
    [self.view endEditing:YES];// 推荐,如果view上有多个键盘调用者,一句话就可以搞定
}
</code></pre>

<ul>
<li>以上两个通知可以通过以下一个通知代替:</li>
</ul>


<pre><code class="objc">
// UIKeyboardWillChangeFrameNotification监听键盘的frame变化
    [[NSNotificationCenter defaultCenter] addObserverForName:UIKeyboardWillChangeFrameNotification object:nil queue:nil usingBlock:^(NSNotification *note) {
        NSLog(@"UIKeyboardWillChangeFrameNotification");
        // 取得键盘弹出的时间
        CGFloat duration = [note.userInfo[UIKeyboardAnimationDurationUserInfoKey] floatValue];
        // 取得键盘最后的frame
        CGRect rect = [note.userInfo[UIKeyboardFrameEndUserInfoKey] CGRectValue];
        //键盘弹出/退出时:约束值 = 屏幕的高度 - 键盘此时的y值
        self.toolbarToView_Constraint.constant = [UIScreen mainScreen].bounds.size.height - rect.origin.y;
        // 增加动画,强制更新布局
        [UIView animateWithDuration:duration animations:^{
            [self.view layoutIfNeeded];
        }];
    }];
</code></pre>

<h3>方法二:将约束替换为修改控制器view的y值</h3>

<ul>
<li>键盘的Y值就是控制器view的Y值</li>
</ul>


<pre><code class="objc">        // UIKeyboardWillChangeFrameNotification监听键盘的frame变化
        [[NSNotificationCenter defaultCenter] addObserverForName:UIKeyboardWillChangeFrameNotification object:nil queue:nil usingBlock:^(NSNotification *note) {
            NSLog(@"keyBoardWillHide");
            // 取得键盘弹出的时间
            CGFloat duration = [note.userInfo[UIKeyboardAnimationDurationUserInfoKey] floatValue];
            // 取得键盘的高度,也就是底部约束上移的距离
            CGRect rect = [note.userInfo[UIKeyboardFrameEndUserInfoKey] CGRectValue];
            CGRect viewRect = self.view.frame;
            // 键盘的y值等于self.view的y值
            viewRect.origin.y = rect.origin.y;
            // 增加动画,强制更新布局
            [UIView animateWithDuration:duration animations:^{
                [self.view layoutIfNeeded];
            }];
        }];
</code></pre>

<h3>方法三:使用transform</h3>

<pre><code class="objc">            // UIKeyboardWillChangeFrameNotification监听键盘的frame变化
            [[NSNotificationCenter defaultCenter] addObserverForName:UIKeyboardWillChangeFrameNotification object:nil queue:nil usingBlock:^(NSNotification *note) {
                NSLog(@"keyBoardWillHide");
                // 取得键盘弹出的时间
                CGFloat duration = [note.userInfo[UIKeyboardAnimationDurationUserInfoKey] floatValue];
                // 取得键盘的高度,也就是底部约束上移的距离
                CGRect rect = [note.userInfo[UIKeyboardFrameEndUserInfoKey] CGRectValue];

                CGFloat ty = [UIScreen mainScreen].bounds.size.height - rect.origin.y;
                self.view.transform = CGAffineTransformMakeTranslation(0, -ty);

                [UIView animateWithDuration:duration animations:^{
                    [self.view layoutIfNeeded];
                }];
            }];
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[聊天cell布局-聊天工具条的输入框(TextField)]]></title>
    <link href="http://xiaobenmao.github.io/blog/2014/04/10/liao-tian-cellbu-ju-liao-tian-gong-ju-tiao-de-shu-ru-kuang-textfield/"/>
    <updated>2014-04-10T19:51:53+08:00</updated>
    <id>http://xiaobenmao.github.io/blog/2014/04/10/liao-tian-cellbu-ju-liao-tian-gong-ju-tiao-de-shu-ru-kuang-textfield</id>
    <content type="html"><![CDATA[<h3>聊天工具条</h3>

<ul>
<li>输入框Text Field系统默认borderStyle边缘框是椭圆形的,如果想自定义使用背景图片,要先修改为虚线模式,否则不清晰</li>
</ul>


<!--more-->


<pre><code>![设置](/images/设置.png)
- 默认:
![默认](/images/默认.png)
- 背景图+椭圆:
</code></pre>

<p><img src="/images/%E8%83%8C%E6%99%AF%E5%9B%BE+%E6%A4%AD%E5%9C%86.png" alt="背景图+椭圆" />
    - 背景图+虚线
    <img src="/images/%E8%83%8C%E6%99%AF%E5%9B%BE+%E8%99%9A%E7%BA%BF.png" alt="背景图+虚线" /></p>

<ul>
<li>Text Field有两个属性:</li>
</ul>


<pre><code>@property(nonatomic,retain) UIView              *leftView;        /
@property(nonatomic)        UITextFieldViewMode  leftViewMode;    // 默认永不显示: UITextFieldViewModeNever

@property(nonatomic,retain) UIView              *rightView;       // e.g. bookmarks button
@property(nonatomic)        UITextFieldViewMode  rightViewMode;   //默认永不显示: UITextFieldViewModeNever
</code></pre>

<pre><code>- 可以在控件右边添加一个没有高度,颜色的view,使输入框的光标右移,不紧贴边缘
</code></pre>

<pre><code>     // 设置文本框左边的内容,占位,使光标右移
    UIView *leftView = [[UIView alloc]init];
    //leftView.backgroundColor = [UIColor blueColor];
    //leftView.frame = CGRectMake(0, 0, 10, 5);
    leftView.frame = CGRectMake(0, 0, 10, 0);
    self.messageFiled.leftView = leftView;
    self.messageFiled.leftViewMode = UITextFieldViewModeAlways;
</code></pre>

<p>!(光标)[<img src="/images/%E5%85%89%E6%A0%87.png" alt="背景图+虚线" />]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[聊天cell布局-button的textLabel中文字超出背景聊天图片]]></title>
    <link href="http://xiaobenmao.github.io/blog/2014/04/07/liao-tian-cellbu-ju-buttonde-textlabelzhong-wen-zi-chao-chu-bei-jing-liao-tian-tu-pian/"/>
    <updated>2014-04-07T19:51:18+08:00</updated>
    <id>http://xiaobenmao.github.io/blog/2014/04/07/liao-tian-cellbu-ju-buttonde-textlabelzhong-wen-zi-chao-chu-bei-jing-liao-tian-tu-pian</id>
    <content type="html"><![CDATA[<h3>label中文字超出背景聊天图片</h3>

<ul>
<li>将button的背景图片拉伸后,button中的textLabel中的字体会超出背景图片的原因是:背景图片周围有一段空白区域:</li>
</ul>


<!--more-->


<pre><code>![背景图片空白区域](/images/背景图片空白区域.png)
![label超出背景图](/images/label超出背景图.png)
- 可以通过button的contentEdgeInsets属性解决
- 设置该属性四周区域后,不会显示textLabel和imageView中的图片,只会显示backgroundImage背景图片


- 方法一:通过代码设置
</code></pre>

<pre><code class="objc">  @property(nonatomic)          UIEdgeInsets contentEdgeInsets UI_APPEARANCE_SELECTOR; // default is UIEdgeInsetsZero
    typedef struct UIEdgeInsets {
    CGFloat top, left, bottom, right;  // specify amount to inset (positive) for each of the edges. values can be negative to 'outset'
    } UIEdgeInsets;

    // 通过代码设置
     self.textButton.contentEdgeInsets = UIEdgeInsetsMake(15, 15, 15, 15);
</code></pre>

<pre><code>- 方法二:直接在属性面板设置
</code></pre>

<p><img src="/images/%E5%B1%9E%E6%80%A7%E9%9D%A2%E6%9D%BF%E8%AE%BE%E7%BD%AE%E8%BE%B9%E7%BC%98%E5%8C%BA%E5%9F%9F.png" alt="属性面板设置边缘区域" /></p>

<ul>
<li><p>竖直高度没有改变:
  -原因:</p>

<pre><code>  - label的文字动态改变,高度不确定,导致textLabel中文字出熬出button
  - 通过约束设置butoon的高度等于textLabel的高度
</code></pre>

<ul>
<li>解决:

<ul>
<li>改变上面的约束:textLabel的高度比button得高度低,此时textLabel会居中显示,其上部和底部平分高度差</li>
</ul>
</li>
</ul>
</li>
<li><p>按钮的宽度随着textLabel文字变化</p></li>
</ul>


<p><img src="/images/contentInset.png" alt="" />
<img src="/images/%E6%AD%A3%E7%A1%AE%E8%BF%90%E8%A1%8C%E5%9B%BE.png" alt="正确运行图" /></p>

<pre><code class="objc">    self.textButton.contentEdgeInsets
    self.textButton.titleEdgeInsets
    self.textButton.imageEdgeInsets
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[聊天cell布局-图片拉伸原理]]></title>
    <link href="http://xiaobenmao.github.io/blog/2014/04/05/liao-tian-cellbu-ju-tu-pian-la-shen-yuan-li/"/>
    <updated>2014-04-05T19:49:32+08:00</updated>
    <id>http://xiaobenmao.github.io/blog/2014/04/05/liao-tian-cellbu-ju-tu-pian-la-shen-yuan-li</id>
    <content type="html"><![CDATA[<h3>图片被拉伸后效果</h3>

<!--more-->


<ul>
<li>美工原图:
<img src="/images/%E7%BE%8E%E5%B7%A5%E5%8E%9F%E5%9B%BE.png" alt="" /></li>
<li>不保护运行图:
<img src="/images/%E4%B8%8D%E5%A4%84%E7%90%86%E6%8B%89%E4%BC%B8%E5%9B%BE.png" alt="" /></li>
<li>需要保护的区域
<img src="/images/%E9%9C%80%E8%A6%81%E4%BF%9D%E6%8A%A4%E5%8C%BA%E5%9F%9F.png" alt="" /></li>
</ul>


<h3>方法一</h3>

<ul>
<li>对原图不要拉伸的地方进行保护,用UIEdgeInsetsMake对上左下
有四个方位取值,取值不合适,会对图片拉伸产生影响.</li>
<li>对剩余部分处理有两种方式:

<ul>
<li>一种是对剩余的部分直接整体拉伸</li>
<li>一种是对剩余的部分直接拿来一块块的平铺,直到满足需要的大小</li>
</ul>


<pre><code class="``objc">typedef NS_ENUM(NSInteger, UIImageResizingMode) {
  UIImageResizingModeTile, //瓦片平铺
  UIImageResizingModeStretch,// 拉伸
};
</code></pre></li>
<li><p>示例代码:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">UIImageView</span> <span class="o">*</span><span class="n">imageView</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIImageView</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>  <span class="n">imageView</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">250</span><span class="p">,</span> <span class="mi">150</span><span class="p">);</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview</span><span class="p">:</span><span class="n">imageView</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c1">// 加载原图</span>
</span><span class='line'>  <span class="bp">UIImage</span> <span class="o">*</span><span class="n">image</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIImage</span> <span class="nl">imageNamed</span><span class="p">:@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">chat_send_nor</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c1">// 拉伸处理（说明需要保护的区域）</span>
</span><span class='line'>  <span class="n">image</span> <span class="o">=</span> <span class="p">[</span><span class="n">image</span> <span class="nl">resizableImageWithCapInsets</span><span class="p">:</span><span class="n">UIEdgeInsetsMake</span><span class="p">(</span><span class="mi">30</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span> <span class="nl">resizingMode</span><span class="p">:</span><span class="n">UIImageResizingModeStretch</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></p></li>
<li>正确效果图:
<img src="/images/%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt="" /></li>
<li>右边保护区域不够拉伸产生效果图</li>
</ul>


<pre><code class="objc">    image = [image resizableImageWithCapInsets:UIEdgeInsetsMake(30, 30, 30, 10) resizingMode:UIImageResizingModeStretch];
</code></pre>

<p><img src="/images/%E5%8F%B3%E4%BE%A7%E4%BF%9D%E6%8A%A4%E4%B8%8D%E5%A4%9F%E6%8B%89%E4%BC%B8%E5%9B%BE.png" alt="" />
- 四周保护区域不够平铺产生效果图</p>

<pre><code class="objc">    image = [image resizableImageWithCapInsets:UIEdgeInsetsMake(10, 10, 10, 10) resizingMode:UIImageResizingModeStretch];
</code></pre>

<p><img src="/images/%E5%9B%9B%E5%91%A8%E4%BF%9D%E6%8A%A4%E4%B8%8D%E5%A4%9F%E5%B9%B3%E9%93%BA%E5%9B%BE.png" alt="" /></p>

<h3>方法二(旧方法)</h3>

<ul>
<li>传递需要保护的区域两个参数

<ul>
<li>第一个: 受保护left区域,系统会根据公式right = width - left - 1,自动计算出右边受保护区域</li>
<li>第二个: 受保护top区域,系统会根据公式bottom = height - top - 1,自动计算出底部受保护区域</li>
<li>将两个公式移项:

<ul>
<li>1 = width - right - left</li>
<li>1 = height - top - bottom</li>
<li>中间受保护的区域大小为1 x 1,一般只要保护好四周特出区域,用来拉伸或者区域只要为纯色即可,越小越好.</li>
<li>两个参数一般赋值为宽度和高度的一半
<code>objc
image = [image stretchableImageWithLeftCapWidth:image.size.width * 0.5 topCapHeight:image.size.height * 0.5];
</code></li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>方法三(推荐)</h3>

<ul>
<li>不用写代码</li>
</ul>


<p><img src="/images/%E9%80%89%E4%B8%AD%E5%9B%BE%E7%89%87.png" alt="" />
<img src="/images/%E6%8B%89%E4%BC%B8%E5%9B%BE%E7%89%87.png" alt="" /></p>

<ul>
<li>新建一个分类,为UIImage增加一个分类方法</li>
</ul>


<pre><code class="objc">#import &lt;UIKit/UIKit.h&gt;

@interface UIImage (Extension)
+ (UIImage *)resizableImage:(NSString *)name;
@end



#import "UIImage+Extension.h"

@implementation UIImage (Extension)
+ (UIImage *)resizableImage:(NSString *)name
{
    UIImage *image = [self imageNamed:name];
    return [image stretchableImageWithLeftCapWidth:image.size.width * 0.5 topCapHeight:image.size.height * 0.5];
}
@end
</code></pre>
]]></content>
  </entry>
  
</feed>
